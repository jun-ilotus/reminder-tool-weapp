// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.6
// Source: notice.proto

package notice

import (
	"context"

	"looklook/app/notice/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddNoticeLogReq      = pb.AddNoticeLogReq
	AddNoticeLogResp     = pb.AddNoticeLogResp
	DelNoticeLogReq      = pb.DelNoticeLogReq
	DelNoticeLogResp     = pb.DelNoticeLogResp
	GetNoticeLogByIdReq  = pb.GetNoticeLogByIdReq
	GetNoticeLogByIdResp = pb.GetNoticeLogByIdResp
	NoticeLog            = pb.NoticeLog
	SearchNoticeLogReq   = pb.SearchNoticeLogReq
	SearchNoticeLogResp  = pb.SearchNoticeLogResp
	UpdateNoticeLogReq   = pb.UpdateNoticeLogReq
	UpdateNoticeLogResp  = pb.UpdateNoticeLogResp

	Notice interface {
		// -----------------------noticeLog-----------------------
		AddNoticeLog(ctx context.Context, in *AddNoticeLogReq, opts ...grpc.CallOption) (*AddNoticeLogResp, error)
		UpdateNoticeLog(ctx context.Context, in *UpdateNoticeLogReq, opts ...grpc.CallOption) (*UpdateNoticeLogResp, error)
		DelNoticeLog(ctx context.Context, in *DelNoticeLogReq, opts ...grpc.CallOption) (*DelNoticeLogResp, error)
		GetNoticeLogById(ctx context.Context, in *GetNoticeLogByIdReq, opts ...grpc.CallOption) (*GetNoticeLogByIdResp, error)
		SearchNoticeLog(ctx context.Context, in *SearchNoticeLogReq, opts ...grpc.CallOption) (*SearchNoticeLogResp, error)
	}

	defaultNotice struct {
		cli zrpc.Client
	}
)

func NewNotice(cli zrpc.Client) Notice {
	return &defaultNotice{
		cli: cli,
	}
}

// -----------------------noticeLog-----------------------
func (m *defaultNotice) AddNoticeLog(ctx context.Context, in *AddNoticeLogReq, opts ...grpc.CallOption) (*AddNoticeLogResp, error) {
	client := pb.NewNoticeClient(m.cli.Conn())
	return client.AddNoticeLog(ctx, in, opts...)
}

func (m *defaultNotice) UpdateNoticeLog(ctx context.Context, in *UpdateNoticeLogReq, opts ...grpc.CallOption) (*UpdateNoticeLogResp, error) {
	client := pb.NewNoticeClient(m.cli.Conn())
	return client.UpdateNoticeLog(ctx, in, opts...)
}

func (m *defaultNotice) DelNoticeLog(ctx context.Context, in *DelNoticeLogReq, opts ...grpc.CallOption) (*DelNoticeLogResp, error) {
	client := pb.NewNoticeClient(m.cli.Conn())
	return client.DelNoticeLog(ctx, in, opts...)
}

func (m *defaultNotice) GetNoticeLogById(ctx context.Context, in *GetNoticeLogByIdReq, opts ...grpc.CallOption) (*GetNoticeLogByIdResp, error) {
	client := pb.NewNoticeClient(m.cli.Conn())
	return client.GetNoticeLogById(ctx, in, opts...)
}

func (m *defaultNotice) SearchNoticeLog(ctx context.Context, in *SearchNoticeLogReq, opts ...grpc.CallOption) (*SearchNoticeLogResp, error) {
	client := pb.NewNoticeClient(m.cli.Conn())
	return client.SearchNoticeLog(ctx, in, opts...)
}
