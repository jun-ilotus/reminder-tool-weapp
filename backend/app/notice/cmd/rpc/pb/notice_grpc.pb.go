// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: notice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Notice_AddNoticeLog_FullMethodName     = "/pb.notice/AddNoticeLog"
	Notice_UpdateNoticeLog_FullMethodName  = "/pb.notice/UpdateNoticeLog"
	Notice_DelNoticeLog_FullMethodName     = "/pb.notice/DelNoticeLog"
	Notice_GetNoticeLogById_FullMethodName = "/pb.notice/GetNoticeLogById"
	Notice_SearchNoticeLog_FullMethodName  = "/pb.notice/SearchNoticeLog"
)

// NoticeClient is the client API for Notice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoticeClient interface {
	// -----------------------noticeLog-----------------------
	AddNoticeLog(ctx context.Context, in *AddNoticeLogReq, opts ...grpc.CallOption) (*AddNoticeLogResp, error)
	UpdateNoticeLog(ctx context.Context, in *UpdateNoticeLogReq, opts ...grpc.CallOption) (*UpdateNoticeLogResp, error)
	DelNoticeLog(ctx context.Context, in *DelNoticeLogReq, opts ...grpc.CallOption) (*DelNoticeLogResp, error)
	GetNoticeLogById(ctx context.Context, in *GetNoticeLogByIdReq, opts ...grpc.CallOption) (*GetNoticeLogByIdResp, error)
	SearchNoticeLog(ctx context.Context, in *SearchNoticeLogReq, opts ...grpc.CallOption) (*SearchNoticeLogResp, error)
}

type noticeClient struct {
	cc grpc.ClientConnInterface
}

func NewNoticeClient(cc grpc.ClientConnInterface) NoticeClient {
	return &noticeClient{cc}
}

func (c *noticeClient) AddNoticeLog(ctx context.Context, in *AddNoticeLogReq, opts ...grpc.CallOption) (*AddNoticeLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddNoticeLogResp)
	err := c.cc.Invoke(ctx, Notice_AddNoticeLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) UpdateNoticeLog(ctx context.Context, in *UpdateNoticeLogReq, opts ...grpc.CallOption) (*UpdateNoticeLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNoticeLogResp)
	err := c.cc.Invoke(ctx, Notice_UpdateNoticeLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) DelNoticeLog(ctx context.Context, in *DelNoticeLogReq, opts ...grpc.CallOption) (*DelNoticeLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelNoticeLogResp)
	err := c.cc.Invoke(ctx, Notice_DelNoticeLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) GetNoticeLogById(ctx context.Context, in *GetNoticeLogByIdReq, opts ...grpc.CallOption) (*GetNoticeLogByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNoticeLogByIdResp)
	err := c.cc.Invoke(ctx, Notice_GetNoticeLogById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) SearchNoticeLog(ctx context.Context, in *SearchNoticeLogReq, opts ...grpc.CallOption) (*SearchNoticeLogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchNoticeLogResp)
	err := c.cc.Invoke(ctx, Notice_SearchNoticeLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoticeServer is the server API for Notice service.
// All implementations must embed UnimplementedNoticeServer
// for forward compatibility.
type NoticeServer interface {
	// -----------------------noticeLog-----------------------
	AddNoticeLog(context.Context, *AddNoticeLogReq) (*AddNoticeLogResp, error)
	UpdateNoticeLog(context.Context, *UpdateNoticeLogReq) (*UpdateNoticeLogResp, error)
	DelNoticeLog(context.Context, *DelNoticeLogReq) (*DelNoticeLogResp, error)
	GetNoticeLogById(context.Context, *GetNoticeLogByIdReq) (*GetNoticeLogByIdResp, error)
	SearchNoticeLog(context.Context, *SearchNoticeLogReq) (*SearchNoticeLogResp, error)
	mustEmbedUnimplementedNoticeServer()
}

// UnimplementedNoticeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNoticeServer struct{}

func (UnimplementedNoticeServer) AddNoticeLog(context.Context, *AddNoticeLogReq) (*AddNoticeLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNoticeLog not implemented")
}
func (UnimplementedNoticeServer) UpdateNoticeLog(context.Context, *UpdateNoticeLogReq) (*UpdateNoticeLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNoticeLog not implemented")
}
func (UnimplementedNoticeServer) DelNoticeLog(context.Context, *DelNoticeLogReq) (*DelNoticeLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelNoticeLog not implemented")
}
func (UnimplementedNoticeServer) GetNoticeLogById(context.Context, *GetNoticeLogByIdReq) (*GetNoticeLogByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoticeLogById not implemented")
}
func (UnimplementedNoticeServer) SearchNoticeLog(context.Context, *SearchNoticeLogReq) (*SearchNoticeLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNoticeLog not implemented")
}
func (UnimplementedNoticeServer) mustEmbedUnimplementedNoticeServer() {}
func (UnimplementedNoticeServer) testEmbeddedByValue()                {}

// UnsafeNoticeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoticeServer will
// result in compilation errors.
type UnsafeNoticeServer interface {
	mustEmbedUnimplementedNoticeServer()
}

func RegisterNoticeServer(s grpc.ServiceRegistrar, srv NoticeServer) {
	// If the following call pancis, it indicates UnimplementedNoticeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Notice_ServiceDesc, srv)
}

func _Notice_AddNoticeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoticeLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).AddNoticeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_AddNoticeLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).AddNoticeLog(ctx, req.(*AddNoticeLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_UpdateNoticeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).UpdateNoticeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_UpdateNoticeLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).UpdateNoticeLog(ctx, req.(*UpdateNoticeLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_DelNoticeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNoticeLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).DelNoticeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_DelNoticeLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).DelNoticeLog(ctx, req.(*DelNoticeLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_GetNoticeLogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoticeLogByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).GetNoticeLogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_GetNoticeLogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).GetNoticeLogById(ctx, req.(*GetNoticeLogByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_SearchNoticeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNoticeLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).SearchNoticeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_SearchNoticeLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).SearchNoticeLog(ctx, req.(*SearchNoticeLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Notice_ServiceDesc is the grpc.ServiceDesc for Notice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.notice",
	HandlerType: (*NoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNoticeLog",
			Handler:    _Notice_AddNoticeLog_Handler,
		},
		{
			MethodName: "UpdateNoticeLog",
			Handler:    _Notice_UpdateNoticeLog_Handler,
		},
		{
			MethodName: "DelNoticeLog",
			Handler:    _Notice_DelNoticeLog_Handler,
		},
		{
			MethodName: "GetNoticeLogById",
			Handler:    _Notice_GetNoticeLogById_Handler,
		},
		{
			MethodName: "SearchNoticeLog",
			Handler:    _Notice_SearchNoticeLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notice.proto",
}
