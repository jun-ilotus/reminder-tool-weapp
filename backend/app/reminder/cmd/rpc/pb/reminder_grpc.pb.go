// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: reminder.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Reminder_AddReminder_FullMethodName     = "/pb.reminder/AddReminder"
	Reminder_UpdateReminder_FullMethodName  = "/pb.reminder/UpdateReminder"
	Reminder_DelReminder_FullMethodName     = "/pb.reminder/DelReminder"
	Reminder_GetReminderById_FullMethodName = "/pb.reminder/GetReminderById"
	Reminder_SearchReminder_FullMethodName  = "/pb.reminder/SearchReminder"
)

// ReminderClient is the client API for Reminder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReminderClient interface {
	// -----------------------reminder-----------------------
	AddReminder(ctx context.Context, in *AddReminderReq, opts ...grpc.CallOption) (*AddReminderResp, error)
	UpdateReminder(ctx context.Context, in *UpdateReminderReq, opts ...grpc.CallOption) (*UpdateReminderResp, error)
	DelReminder(ctx context.Context, in *DelReminderReq, opts ...grpc.CallOption) (*DelReminderResp, error)
	GetReminderById(ctx context.Context, in *GetReminderByIdReq, opts ...grpc.CallOption) (*GetReminderByIdResp, error)
	SearchReminder(ctx context.Context, in *SearchReminderReq, opts ...grpc.CallOption) (*SearchReminderResp, error)
}

type reminderClient struct {
	cc grpc.ClientConnInterface
}

func NewReminderClient(cc grpc.ClientConnInterface) ReminderClient {
	return &reminderClient{cc}
}

func (c *reminderClient) AddReminder(ctx context.Context, in *AddReminderReq, opts ...grpc.CallOption) (*AddReminderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReminderResp)
	err := c.cc.Invoke(ctx, Reminder_AddReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderClient) UpdateReminder(ctx context.Context, in *UpdateReminderReq, opts ...grpc.CallOption) (*UpdateReminderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReminderResp)
	err := c.cc.Invoke(ctx, Reminder_UpdateReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderClient) DelReminder(ctx context.Context, in *DelReminderReq, opts ...grpc.CallOption) (*DelReminderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelReminderResp)
	err := c.cc.Invoke(ctx, Reminder_DelReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderClient) GetReminderById(ctx context.Context, in *GetReminderByIdReq, opts ...grpc.CallOption) (*GetReminderByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReminderByIdResp)
	err := c.cc.Invoke(ctx, Reminder_GetReminderById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderClient) SearchReminder(ctx context.Context, in *SearchReminderReq, opts ...grpc.CallOption) (*SearchReminderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchReminderResp)
	err := c.cc.Invoke(ctx, Reminder_SearchReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReminderServer is the server API for Reminder service.
// All implementations must embed UnimplementedReminderServer
// for forward compatibility.
type ReminderServer interface {
	// -----------------------reminder-----------------------
	AddReminder(context.Context, *AddReminderReq) (*AddReminderResp, error)
	UpdateReminder(context.Context, *UpdateReminderReq) (*UpdateReminderResp, error)
	DelReminder(context.Context, *DelReminderReq) (*DelReminderResp, error)
	GetReminderById(context.Context, *GetReminderByIdReq) (*GetReminderByIdResp, error)
	SearchReminder(context.Context, *SearchReminderReq) (*SearchReminderResp, error)
	mustEmbedUnimplementedReminderServer()
}

// UnimplementedReminderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReminderServer struct{}

func (UnimplementedReminderServer) AddReminder(context.Context, *AddReminderReq) (*AddReminderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReminder not implemented")
}
func (UnimplementedReminderServer) UpdateReminder(context.Context, *UpdateReminderReq) (*UpdateReminderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReminder not implemented")
}
func (UnimplementedReminderServer) DelReminder(context.Context, *DelReminderReq) (*DelReminderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelReminder not implemented")
}
func (UnimplementedReminderServer) GetReminderById(context.Context, *GetReminderByIdReq) (*GetReminderByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReminderById not implemented")
}
func (UnimplementedReminderServer) SearchReminder(context.Context, *SearchReminderReq) (*SearchReminderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchReminder not implemented")
}
func (UnimplementedReminderServer) mustEmbedUnimplementedReminderServer() {}
func (UnimplementedReminderServer) testEmbeddedByValue()                  {}

// UnsafeReminderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReminderServer will
// result in compilation errors.
type UnsafeReminderServer interface {
	mustEmbedUnimplementedReminderServer()
}

func RegisterReminderServer(s grpc.ServiceRegistrar, srv ReminderServer) {
	// If the following call pancis, it indicates UnimplementedReminderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Reminder_ServiceDesc, srv)
}

func _Reminder_AddReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReminderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServer).AddReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reminder_AddReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServer).AddReminder(ctx, req.(*AddReminderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reminder_UpdateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReminderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServer).UpdateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reminder_UpdateReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServer).UpdateReminder(ctx, req.(*UpdateReminderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reminder_DelReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelReminderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServer).DelReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reminder_DelReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServer).DelReminder(ctx, req.(*DelReminderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reminder_GetReminderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReminderByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServer).GetReminderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reminder_GetReminderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServer).GetReminderById(ctx, req.(*GetReminderByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reminder_SearchReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReminderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServer).SearchReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reminder_SearchReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServer).SearchReminder(ctx, req.(*SearchReminderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Reminder_ServiceDesc is the grpc.ServiceDesc for Reminder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reminder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.reminder",
	HandlerType: (*ReminderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReminder",
			Handler:    _Reminder_AddReminder_Handler,
		},
		{
			MethodName: "UpdateReminder",
			Handler:    _Reminder_UpdateReminder_Handler,
		},
		{
			MethodName: "DelReminder",
			Handler:    _Reminder_DelReminder_Handler,
		},
		{
			MethodName: "GetReminderById",
			Handler:    _Reminder_GetReminderById_Handler,
		},
		{
			MethodName: "SearchReminder",
			Handler:    _Reminder_SearchReminder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reminder.proto",
}
