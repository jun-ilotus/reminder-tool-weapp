// Code generated by goctl. DO NOT EDIT.
// Source: lottery.proto

package lottery

import (
	"context"

	"looklook/app/lottery/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddLotteryReq      = pb.AddLotteryReq
	AddLotteryResp     = pb.AddLotteryResp
	AddPrizeReq        = pb.AddPrizeReq
	AddPrizeResp       = pb.AddPrizeResp
	DelLotteryReq      = pb.DelLotteryReq
	DelLotteryResp     = pb.DelLotteryResp
	DelPrizeReq        = pb.DelPrizeReq
	DelPrizeResp       = pb.DelPrizeResp
	GetLotteryByIdReq  = pb.GetLotteryByIdReq
	GetLotteryByIdResp = pb.GetLotteryByIdResp
	GetPrizeByIdReq    = pb.GetPrizeByIdReq
	GetPrizeByIdResp   = pb.GetPrizeByIdResp
	Lottery            = pb.Lottery
	Prize              = pb.Prize
	SearchLotteryReq   = pb.SearchLotteryReq
	SearchLotteryResp  = pb.SearchLotteryResp
	SearchPrizeReq     = pb.SearchPrizeReq
	SearchPrizeResp    = pb.SearchPrizeResp
	UpdateLotteryReq   = pb.UpdateLotteryReq
	UpdateLotteryResp  = pb.UpdateLotteryResp
	UpdatePrizeReq     = pb.UpdatePrizeReq
	UpdatePrizeResp    = pb.UpdatePrizeResp

	LotteryZrpcClient interface {
		// -----------------------抽奖表-----------------------
		AddLottery(ctx context.Context, in *AddLotteryReq, opts ...grpc.CallOption) (*AddLotteryResp, error)
		UpdateLottery(ctx context.Context, in *UpdateLotteryReq, opts ...grpc.CallOption) (*UpdateLotteryResp, error)
		DelLottery(ctx context.Context, in *DelLotteryReq, opts ...grpc.CallOption) (*DelLotteryResp, error)
		GetLotteryById(ctx context.Context, in *GetLotteryByIdReq, opts ...grpc.CallOption) (*GetLotteryByIdResp, error)
		SearchLottery(ctx context.Context, in *SearchLotteryReq, opts ...grpc.CallOption) (*SearchLotteryResp, error)
		// -----------------------奖品表-----------------------
		AddPrize(ctx context.Context, in *AddPrizeReq, opts ...grpc.CallOption) (*AddPrizeResp, error)
		UpdatePrize(ctx context.Context, in *UpdatePrizeReq, opts ...grpc.CallOption) (*UpdatePrizeResp, error)
		DelPrize(ctx context.Context, in *DelPrizeReq, opts ...grpc.CallOption) (*DelPrizeResp, error)
		GetPrizeById(ctx context.Context, in *GetPrizeByIdReq, opts ...grpc.CallOption) (*GetPrizeByIdResp, error)
		SearchPrize(ctx context.Context, in *SearchPrizeReq, opts ...grpc.CallOption) (*SearchPrizeResp, error)
	}

	defaultLotteryZrpcClient struct {
		cli zrpc.Client
	}
)

func NewLotteryZrpcClient(cli zrpc.Client) LotteryZrpcClient {
	return &defaultLotteryZrpcClient{
		cli: cli,
	}
}

// -----------------------抽奖表-----------------------
func (m *defaultLotteryZrpcClient) AddLottery(ctx context.Context, in *AddLotteryReq, opts ...grpc.CallOption) (*AddLotteryResp, error) {
	client := pb.NewLotteryClient(m.cli.Conn())
	return client.AddLottery(ctx, in, opts...)
}

func (m *defaultLotteryZrpcClient) UpdateLottery(ctx context.Context, in *UpdateLotteryReq, opts ...grpc.CallOption) (*UpdateLotteryResp, error) {
	client := pb.NewLotteryClient(m.cli.Conn())
	return client.UpdateLottery(ctx, in, opts...)
}

func (m *defaultLotteryZrpcClient) DelLottery(ctx context.Context, in *DelLotteryReq, opts ...grpc.CallOption) (*DelLotteryResp, error) {
	client := pb.NewLotteryClient(m.cli.Conn())
	return client.DelLottery(ctx, in, opts...)
}

func (m *defaultLotteryZrpcClient) GetLotteryById(ctx context.Context, in *GetLotteryByIdReq, opts ...grpc.CallOption) (*GetLotteryByIdResp, error) {
	client := pb.NewLotteryClient(m.cli.Conn())
	return client.GetLotteryById(ctx, in, opts...)
}

func (m *defaultLotteryZrpcClient) SearchLottery(ctx context.Context, in *SearchLotteryReq, opts ...grpc.CallOption) (*SearchLotteryResp, error) {
	client := pb.NewLotteryClient(m.cli.Conn())
	return client.SearchLottery(ctx, in, opts...)
}

// -----------------------奖品表-----------------------
func (m *defaultLotteryZrpcClient) AddPrize(ctx context.Context, in *AddPrizeReq, opts ...grpc.CallOption) (*AddPrizeResp, error) {
	client := pb.NewLotteryClient(m.cli.Conn())
	return client.AddPrize(ctx, in, opts...)
}

func (m *defaultLotteryZrpcClient) UpdatePrize(ctx context.Context, in *UpdatePrizeReq, opts ...grpc.CallOption) (*UpdatePrizeResp, error) {
	client := pb.NewLotteryClient(m.cli.Conn())
	return client.UpdatePrize(ctx, in, opts...)
}

func (m *defaultLotteryZrpcClient) DelPrize(ctx context.Context, in *DelPrizeReq, opts ...grpc.CallOption) (*DelPrizeResp, error) {
	client := pb.NewLotteryClient(m.cli.Conn())
	return client.DelPrize(ctx, in, opts...)
}

func (m *defaultLotteryZrpcClient) GetPrizeById(ctx context.Context, in *GetPrizeByIdReq, opts ...grpc.CallOption) (*GetPrizeByIdResp, error) {
	client := pb.NewLotteryClient(m.cli.Conn())
	return client.GetPrizeById(ctx, in, opts...)
}

func (m *defaultLotteryZrpcClient) SearchPrize(ctx context.Context, in *SearchPrizeReq, opts ...grpc.CallOption) (*SearchPrizeResp, error) {
	client := pb.NewLotteryClient(m.cli.Conn())
	return client.SearchPrize(ctx, in, opts...)
}
