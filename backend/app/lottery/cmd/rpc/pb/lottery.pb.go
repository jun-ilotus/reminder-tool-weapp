// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.0
// source: lottery.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// --------------------------------鎶藉琛?-------------------------------
type Lottery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                       //id
	UserId        int64                  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`               //鍙戣捣鎶藉鐢ㄦ埛ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                    //榛樿鍙栦竴绛夊鍚嶇О
	Thumb         string                 `protobuf:"bytes,4,opt,name=thumb,proto3" json:"thumb,omitempty"`                  //榛樿鍙栦竴绛夌粡閰嶅浘
	PublishTime   int64                  `protobuf:"varint,5,opt,name=publishTime,proto3" json:"publishTime,omitempty"`     //鍙戝竷鎶藉鏃堕棿
	JoinNumber    int64                  `protobuf:"varint,6,opt,name=joinNumber,proto3" json:"joinNumber,omitempty"`       //鑷姩寮€濂栦汉鏁?
	Introduce     string                 `protobuf:"bytes,7,opt,name=introduce,proto3" json:"introduce,omitempty"`          //鎶藉璇存槑
	AwardDeadline int64                  `protobuf:"varint,8,opt,name=awardDeadline,proto3" json:"awardDeadline,omitempty"` //棰嗗鎴鏃堕棿
	IsSelected    int64                  `protobuf:"varint,9,opt,name=isSelected,proto3" json:"isSelected,omitempty"`       //鏄惁绮鹃€?1鏄?0鍚?
	AnnounceType  int64                  `protobuf:"varint,10,opt,name=announceType,proto3" json:"announceType,omitempty"`  //寮€濂栬缃細1鎸夋椂闂村紑濂?2鎸変汉鏁板紑濂?3鍗虫娊鍗充腑
	AnnounceTime  int64                  `protobuf:"varint,11,opt,name=announceTime,proto3" json:"announceTime,omitempty"`  //寮€濂栨椂闂?
	CreateTime    int64                  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`      //createTime
	UpdateTime    int64                  `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`      //updateTime
	IsAnnounced   int64                  `protobuf:"varint,14,opt,name=isAnnounced,proto3" json:"isAnnounced,omitempty"`    //鏄惁寮€濂栵細0鏈紑濂栵紱1宸茬粡寮€濂?
	SponsorId     int64                  `protobuf:"varint,15,opt,name=sponsorId,proto3" json:"sponsorId,omitempty"`        //鍙戣捣鎶藉璧炲姪鍟咺D
	IsClocked     int64                  `protobuf:"varint,16,opt,name=isClocked,proto3" json:"isClocked,omitempty"`        //鏄惁寮€鍚墦鍗′换鍔★細0鏈紑鍚紱1宸插紑鍚?
	ClockTaskId   int64                  `protobuf:"varint,17,opt,name=clockTaskId,proto3" json:"clockTaskId,omitempty"`    //鎵撳崱浠诲姟浠诲姟ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Lottery) Reset() {
	*x = Lottery{}
	mi := &file_lottery_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Lottery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lottery) ProtoMessage() {}

func (x *Lottery) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lottery.ProtoReflect.Descriptor instead.
func (*Lottery) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{0}
}

func (x *Lottery) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lottery) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Lottery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Lottery) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *Lottery) GetPublishTime() int64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *Lottery) GetJoinNumber() int64 {
	if x != nil {
		return x.JoinNumber
	}
	return 0
}

func (x *Lottery) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *Lottery) GetAwardDeadline() int64 {
	if x != nil {
		return x.AwardDeadline
	}
	return 0
}

func (x *Lottery) GetIsSelected() int64 {
	if x != nil {
		return x.IsSelected
	}
	return 0
}

func (x *Lottery) GetAnnounceType() int64 {
	if x != nil {
		return x.AnnounceType
	}
	return 0
}

func (x *Lottery) GetAnnounceTime() int64 {
	if x != nil {
		return x.AnnounceTime
	}
	return 0
}

func (x *Lottery) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Lottery) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Lottery) GetIsAnnounced() int64 {
	if x != nil {
		return x.IsAnnounced
	}
	return 0
}

func (x *Lottery) GetSponsorId() int64 {
	if x != nil {
		return x.SponsorId
	}
	return 0
}

func (x *Lottery) GetIsClocked() int64 {
	if x != nil {
		return x.IsClocked
	}
	return 0
}

func (x *Lottery) GetClockTaskId() int64 {
	if x != nil {
		return x.ClockTaskId
	}
	return 0
}

type AddLotteryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`               //鍙戣捣鎶藉鐢ㄦ埛ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                    //榛樿鍙栦竴绛夊鍚嶇О
	Thumb         string                 `protobuf:"bytes,3,opt,name=thumb,proto3" json:"thumb,omitempty"`                  //榛樿鍙栦竴绛夌粡閰嶅浘
	PublishTime   int64                  `protobuf:"varint,4,opt,name=publishTime,proto3" json:"publishTime,omitempty"`     //鍙戝竷鎶藉鏃堕棿
	JoinNumber    int64                  `protobuf:"varint,5,opt,name=joinNumber,proto3" json:"joinNumber,omitempty"`       //鑷姩寮€濂栦汉鏁?
	Introduce     string                 `protobuf:"bytes,6,opt,name=introduce,proto3" json:"introduce,omitempty"`          //鎶藉璇存槑
	AwardDeadline int64                  `protobuf:"varint,7,opt,name=awardDeadline,proto3" json:"awardDeadline,omitempty"` //棰嗗鎴鏃堕棿
	IsSelected    int64                  `protobuf:"varint,8,opt,name=isSelected,proto3" json:"isSelected,omitempty"`       //鏄惁绮鹃€?1鏄?0鍚?
	AnnounceType  int64                  `protobuf:"varint,9,opt,name=announceType,proto3" json:"announceType,omitempty"`   //寮€濂栬缃細1鎸夋椂闂村紑濂?2鎸変汉鏁板紑濂?3鍗虫娊鍗充腑
	AnnounceTime  int64                  `protobuf:"varint,10,opt,name=announceTime,proto3" json:"announceTime,omitempty"`  //寮€濂栨椂闂?
	IsAnnounced   int64                  `protobuf:"varint,11,opt,name=isAnnounced,proto3" json:"isAnnounced,omitempty"`    //鏄惁寮€濂栵細0鏈紑濂栵紱1宸茬粡寮€濂?
	SponsorId     int64                  `protobuf:"varint,12,opt,name=sponsorId,proto3" json:"sponsorId,omitempty"`        //鍙戣捣鎶藉璧炲姪鍟咺D
	IsClocked     int64                  `protobuf:"varint,13,opt,name=isClocked,proto3" json:"isClocked,omitempty"`        //鏄惁寮€鍚墦鍗′换鍔★細0鏈紑鍚紱1宸插紑鍚?
	ClockTaskId   int64                  `protobuf:"varint,14,opt,name=clockTaskId,proto3" json:"clockTaskId,omitempty"`    //鎵撳崱浠诲姟浠诲姟ID
	Id            int64                  `protobuf:"varint,15,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddLotteryReq) Reset() {
	*x = AddLotteryReq{}
	mi := &file_lottery_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLotteryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLotteryReq) ProtoMessage() {}

func (x *AddLotteryReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLotteryReq.ProtoReflect.Descriptor instead.
func (*AddLotteryReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{1}
}

func (x *AddLotteryReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddLotteryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddLotteryReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *AddLotteryReq) GetPublishTime() int64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *AddLotteryReq) GetJoinNumber() int64 {
	if x != nil {
		return x.JoinNumber
	}
	return 0
}

func (x *AddLotteryReq) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *AddLotteryReq) GetAwardDeadline() int64 {
	if x != nil {
		return x.AwardDeadline
	}
	return 0
}

func (x *AddLotteryReq) GetIsSelected() int64 {
	if x != nil {
		return x.IsSelected
	}
	return 0
}

func (x *AddLotteryReq) GetAnnounceType() int64 {
	if x != nil {
		return x.AnnounceType
	}
	return 0
}

func (x *AddLotteryReq) GetAnnounceTime() int64 {
	if x != nil {
		return x.AnnounceTime
	}
	return 0
}

func (x *AddLotteryReq) GetIsAnnounced() int64 {
	if x != nil {
		return x.IsAnnounced
	}
	return 0
}

func (x *AddLotteryReq) GetSponsorId() int64 {
	if x != nil {
		return x.SponsorId
	}
	return 0
}

func (x *AddLotteryReq) GetIsClocked() int64 {
	if x != nil {
		return x.IsClocked
	}
	return 0
}

func (x *AddLotteryReq) GetClockTaskId() int64 {
	if x != nil {
		return x.ClockTaskId
	}
	return 0
}

func (x *AddLotteryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AddLotteryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddLotteryResp) Reset() {
	*x = AddLotteryResp{}
	mi := &file_lottery_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLotteryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLotteryResp) ProtoMessage() {}

func (x *AddLotteryResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLotteryResp.ProtoReflect.Descriptor instead.
func (*AddLotteryResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{2}
}

func (x *AddLotteryResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateLotteryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                       //id
	UserId        int64                  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`               //鍙戣捣鎶藉鐢ㄦ埛ID
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                    //榛樿鍙栦竴绛夊鍚嶇О
	Thumb         string                 `protobuf:"bytes,4,opt,name=thumb,proto3" json:"thumb,omitempty"`                  //榛樿鍙栦竴绛夌粡閰嶅浘
	PublishTime   int64                  `protobuf:"varint,5,opt,name=publishTime,proto3" json:"publishTime,omitempty"`     //鍙戝竷鎶藉鏃堕棿
	JoinNumber    int64                  `protobuf:"varint,6,opt,name=joinNumber,proto3" json:"joinNumber,omitempty"`       //鑷姩寮€濂栦汉鏁?
	Introduce     string                 `protobuf:"bytes,7,opt,name=introduce,proto3" json:"introduce,omitempty"`          //鎶藉璇存槑
	AwardDeadline int64                  `protobuf:"varint,8,opt,name=awardDeadline,proto3" json:"awardDeadline,omitempty"` //棰嗗鎴鏃堕棿
	IsSelected    int64                  `protobuf:"varint,9,opt,name=isSelected,proto3" json:"isSelected,omitempty"`       //鏄惁绮鹃€?1鏄?0鍚?
	AnnounceType  int64                  `protobuf:"varint,10,opt,name=announceType,proto3" json:"announceType,omitempty"`  //寮€濂栬缃細1鎸夋椂闂村紑濂?2鎸変汉鏁板紑濂?3鍗虫娊鍗充腑
	AnnounceTime  int64                  `protobuf:"varint,11,opt,name=announceTime,proto3" json:"announceTime,omitempty"`  //寮€濂栨椂闂?
	IsAnnounced   int64                  `protobuf:"varint,12,opt,name=isAnnounced,proto3" json:"isAnnounced,omitempty"`    //鏄惁寮€濂栵細0鏈紑濂栵紱1宸茬粡寮€濂?
	SponsorId     int64                  `protobuf:"varint,13,opt,name=sponsorId,proto3" json:"sponsorId,omitempty"`        //鍙戣捣鎶藉璧炲姪鍟咺D
	IsClocked     int64                  `protobuf:"varint,14,opt,name=isClocked,proto3" json:"isClocked,omitempty"`        //鏄惁寮€鍚墦鍗′换鍔★細0鏈紑鍚紱1宸插紑鍚?
	ClockTaskId   int64                  `protobuf:"varint,15,opt,name=clockTaskId,proto3" json:"clockTaskId,omitempty"`    //鎵撳崱浠诲姟浠诲姟ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLotteryReq) Reset() {
	*x = UpdateLotteryReq{}
	mi := &file_lottery_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLotteryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLotteryReq) ProtoMessage() {}

func (x *UpdateLotteryReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLotteryReq.ProtoReflect.Descriptor instead.
func (*UpdateLotteryReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateLotteryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateLotteryReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateLotteryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLotteryReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *UpdateLotteryReq) GetPublishTime() int64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *UpdateLotteryReq) GetJoinNumber() int64 {
	if x != nil {
		return x.JoinNumber
	}
	return 0
}

func (x *UpdateLotteryReq) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *UpdateLotteryReq) GetAwardDeadline() int64 {
	if x != nil {
		return x.AwardDeadline
	}
	return 0
}

func (x *UpdateLotteryReq) GetIsSelected() int64 {
	if x != nil {
		return x.IsSelected
	}
	return 0
}

func (x *UpdateLotteryReq) GetAnnounceType() int64 {
	if x != nil {
		return x.AnnounceType
	}
	return 0
}

func (x *UpdateLotteryReq) GetAnnounceTime() int64 {
	if x != nil {
		return x.AnnounceTime
	}
	return 0
}

func (x *UpdateLotteryReq) GetIsAnnounced() int64 {
	if x != nil {
		return x.IsAnnounced
	}
	return 0
}

func (x *UpdateLotteryReq) GetSponsorId() int64 {
	if x != nil {
		return x.SponsorId
	}
	return 0
}

func (x *UpdateLotteryReq) GetIsClocked() int64 {
	if x != nil {
		return x.IsClocked
	}
	return 0
}

func (x *UpdateLotteryReq) GetClockTaskId() int64 {
	if x != nil {
		return x.ClockTaskId
	}
	return 0
}

type UpdateLotteryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLotteryResp) Reset() {
	*x = UpdateLotteryResp{}
	mi := &file_lottery_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLotteryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLotteryResp) ProtoMessage() {}

func (x *UpdateLotteryResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLotteryResp.ProtoReflect.Descriptor instead.
func (*UpdateLotteryResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{4}
}

type DelLotteryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelLotteryReq) Reset() {
	*x = DelLotteryReq{}
	mi := &file_lottery_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelLotteryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelLotteryReq) ProtoMessage() {}

func (x *DelLotteryReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelLotteryReq.ProtoReflect.Descriptor instead.
func (*DelLotteryReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{5}
}

func (x *DelLotteryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelLotteryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelLotteryResp) Reset() {
	*x = DelLotteryResp{}
	mi := &file_lottery_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelLotteryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelLotteryResp) ProtoMessage() {}

func (x *DelLotteryResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelLotteryResp.ProtoReflect.Descriptor instead.
func (*DelLotteryResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{6}
}

type GetLotteryByIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLotteryByIdReq) Reset() {
	*x = GetLotteryByIdReq{}
	mi := &file_lottery_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLotteryByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLotteryByIdReq) ProtoMessage() {}

func (x *GetLotteryByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLotteryByIdReq.ProtoReflect.Descriptor instead.
func (*GetLotteryByIdReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{7}
}

func (x *GetLotteryByIdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetLotteryByIdResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lottery       *Lottery               `protobuf:"bytes,1,opt,name=lottery,proto3" json:"lottery,omitempty"` //lottery
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLotteryByIdResp) Reset() {
	*x = GetLotteryByIdResp{}
	mi := &file_lottery_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLotteryByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLotteryByIdResp) ProtoMessage() {}

func (x *GetLotteryByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLotteryByIdResp.ProtoReflect.Descriptor instead.
func (*GetLotteryByIdResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{8}
}

func (x *GetLotteryByIdResp) GetLottery() *Lottery {
	if x != nil {
		return x.Lottery
	}
	return nil
}

type SearchLotteryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`   //page
	Limit         int64                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"` //limit
	LastId        int64                  `protobuf:"varint,20,opt,name=lastId,proto3" json:"lastId,omitempty"`
	Id            int64                  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                        //id
	UserId        int64                  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`                //鍙戣捣鎶藉鐢ㄦ埛ID
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                     //榛樿鍙栦竴绛夊鍚嶇О
	Thumb         string                 `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`                   //榛樿鍙栦竴绛夌粡閰嶅浘
	PublishTime   int64                  `protobuf:"varint,7,opt,name=publishTime,proto3" json:"publishTime,omitempty"`      //鍙戝竷鎶藉鏃堕棿
	JoinNumber    int64                  `protobuf:"varint,8,opt,name=joinNumber,proto3" json:"joinNumber,omitempty"`        //鑷姩寮€濂栦汉鏁?
	Introduce     string                 `protobuf:"bytes,9,opt,name=introduce,proto3" json:"introduce,omitempty"`           //鎶藉璇存槑
	AwardDeadline int64                  `protobuf:"varint,10,opt,name=awardDeadline,proto3" json:"awardDeadline,omitempty"` //棰嗗鎴鏃堕棿
	IsSelected    int64                  `protobuf:"varint,11,opt,name=isSelected,proto3" json:"isSelected,omitempty"`       //鏄惁绮鹃€?1鏄?0鍚?
	AnnounceType  int64                  `protobuf:"varint,12,opt,name=announceType,proto3" json:"announceType,omitempty"`   //寮€濂栬缃細1鎸夋椂闂村紑濂?2鎸変汉鏁板紑濂?3鍗虫娊鍗充腑
	AnnounceTime  int64                  `protobuf:"varint,13,opt,name=announceTime,proto3" json:"announceTime,omitempty"`   //寮€濂栨椂闂?
	CreateTime    int64                  `protobuf:"varint,14,opt,name=createTime,proto3" json:"createTime,omitempty"`       //createTime
	UpdateTime    int64                  `protobuf:"varint,15,opt,name=updateTime,proto3" json:"updateTime,omitempty"`       //updateTime
	IsAnnounced   int64                  `protobuf:"varint,16,opt,name=isAnnounced,proto3" json:"isAnnounced,omitempty"`     //鏄惁寮€濂栵細0鏈紑濂栵紱1宸茬粡寮€濂?
	SponsorId     int64                  `protobuf:"varint,17,opt,name=sponsorId,proto3" json:"sponsorId,omitempty"`         //鍙戣捣鎶藉璧炲姪鍟咺D
	IsClocked     int64                  `protobuf:"varint,18,opt,name=isClocked,proto3" json:"isClocked,omitempty"`         //鏄惁寮€鍚墦鍗′换鍔★細0鏈紑鍚紱1宸插紑鍚?
	ClockTaskId   int64                  `protobuf:"varint,19,opt,name=clockTaskId,proto3" json:"clockTaskId,omitempty"`     //鎵撳崱浠诲姟浠诲姟ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchLotteryReq) Reset() {
	*x = SearchLotteryReq{}
	mi := &file_lottery_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLotteryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLotteryReq) ProtoMessage() {}

func (x *SearchLotteryReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLotteryReq.ProtoReflect.Descriptor instead.
func (*SearchLotteryReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{9}
}

func (x *SearchLotteryReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchLotteryReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchLotteryReq) GetLastId() int64 {
	if x != nil {
		return x.LastId
	}
	return 0
}

func (x *SearchLotteryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchLotteryReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchLotteryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchLotteryReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *SearchLotteryReq) GetPublishTime() int64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *SearchLotteryReq) GetJoinNumber() int64 {
	if x != nil {
		return x.JoinNumber
	}
	return 0
}

func (x *SearchLotteryReq) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *SearchLotteryReq) GetAwardDeadline() int64 {
	if x != nil {
		return x.AwardDeadline
	}
	return 0
}

func (x *SearchLotteryReq) GetIsSelected() int64 {
	if x != nil {
		return x.IsSelected
	}
	return 0
}

func (x *SearchLotteryReq) GetAnnounceType() int64 {
	if x != nil {
		return x.AnnounceType
	}
	return 0
}

func (x *SearchLotteryReq) GetAnnounceTime() int64 {
	if x != nil {
		return x.AnnounceTime
	}
	return 0
}

func (x *SearchLotteryReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SearchLotteryReq) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SearchLotteryReq) GetIsAnnounced() int64 {
	if x != nil {
		return x.IsAnnounced
	}
	return 0
}

func (x *SearchLotteryReq) GetSponsorId() int64 {
	if x != nil {
		return x.SponsorId
	}
	return 0
}

func (x *SearchLotteryReq) GetIsClocked() int64 {
	if x != nil {
		return x.IsClocked
	}
	return 0
}

func (x *SearchLotteryReq) GetClockTaskId() int64 {
	if x != nil {
		return x.ClockTaskId
	}
	return 0
}

type SearchLotteryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lottery       []*Lottery             `protobuf:"bytes,1,rep,name=lottery,proto3" json:"lottery,omitempty"` //lottery
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchLotteryResp) Reset() {
	*x = SearchLotteryResp{}
	mi := &file_lottery_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLotteryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLotteryResp) ProtoMessage() {}

func (x *SearchLotteryResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLotteryResp.ProtoReflect.Descriptor instead.
func (*SearchLotteryResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{10}
}

func (x *SearchLotteryResp) GetLottery() []*Lottery {
	if x != nil {
		return x.Lottery
	}
	return nil
}

// --------------------------------鍙備笌鎶藉--------------------------------
type LotteryParticipation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                 //涓婚敭
	LotteryId     int64                  `protobuf:"varint,2,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"`   //鍙備笌鐨勬娊濂栫殑id
	UserId        int64                  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`         //鐢ㄦ埛id
	IsWon         int64                  `protobuf:"varint,4,opt,name=isWon,proto3" json:"isWon,omitempty"`           //涓浜嗗悧锛?
	PrizeId       int64                  `protobuf:"varint,5,opt,name=prizeId,proto3" json:"prizeId,omitempty"`       //濂栧搧id
	CreateTime    int64                  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"` //createTime
	UpdateTime    int64                  `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //updateTime
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LotteryParticipation) Reset() {
	*x = LotteryParticipation{}
	mi := &file_lottery_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LotteryParticipation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryParticipation) ProtoMessage() {}

func (x *LotteryParticipation) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryParticipation.ProtoReflect.Descriptor instead.
func (*LotteryParticipation) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{11}
}

func (x *LotteryParticipation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LotteryParticipation) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *LotteryParticipation) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LotteryParticipation) GetIsWon() int64 {
	if x != nil {
		return x.IsWon
	}
	return 0
}

func (x *LotteryParticipation) GetPrizeId() int64 {
	if x != nil {
		return x.PrizeId
	}
	return 0
}

func (x *LotteryParticipation) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *LotteryParticipation) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type AddLotteryParticipationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LotteryId     int64                  `protobuf:"varint,1,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"` //鍙備笌鐨勬娊濂栫殑id
	UserId        int64                  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`       //鐢ㄦ埛id
	IsWon         int64                  `protobuf:"varint,3,opt,name=isWon,proto3" json:"isWon,omitempty"`         //涓浜嗗悧锛?
	PrizeId       int64                  `protobuf:"varint,4,opt,name=prizeId,proto3" json:"prizeId,omitempty"`     //濂栧搧id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddLotteryParticipationReq) Reset() {
	*x = AddLotteryParticipationReq{}
	mi := &file_lottery_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLotteryParticipationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLotteryParticipationReq) ProtoMessage() {}

func (x *AddLotteryParticipationReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLotteryParticipationReq.ProtoReflect.Descriptor instead.
func (*AddLotteryParticipationReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{12}
}

func (x *AddLotteryParticipationReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *AddLotteryParticipationReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddLotteryParticipationReq) GetIsWon() int64 {
	if x != nil {
		return x.IsWon
	}
	return 0
}

func (x *AddLotteryParticipationReq) GetPrizeId() int64 {
	if x != nil {
		return x.PrizeId
	}
	return 0
}

type AddLotteryParticipationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddLotteryParticipationResp) Reset() {
	*x = AddLotteryParticipationResp{}
	mi := &file_lottery_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLotteryParticipationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLotteryParticipationResp) ProtoMessage() {}

func (x *AddLotteryParticipationResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLotteryParticipationResp.ProtoReflect.Descriptor instead.
func (*AddLotteryParticipationResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{13}
}

type UpdateLotteryParticipationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               //涓婚敭
	LotteryId     int64                  `protobuf:"varint,2,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"` //鍙備笌鐨勬娊濂栫殑id
	UserId        int64                  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`       //鐢ㄦ埛id
	IsWon         int64                  `protobuf:"varint,4,opt,name=isWon,proto3" json:"isWon,omitempty"`         //涓浜嗗悧锛?
	PrizeId       int64                  `protobuf:"varint,5,opt,name=prizeId,proto3" json:"prizeId,omitempty"`     //濂栧搧id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLotteryParticipationReq) Reset() {
	*x = UpdateLotteryParticipationReq{}
	mi := &file_lottery_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLotteryParticipationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLotteryParticipationReq) ProtoMessage() {}

func (x *UpdateLotteryParticipationReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLotteryParticipationReq.ProtoReflect.Descriptor instead.
func (*UpdateLotteryParticipationReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateLotteryParticipationReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateLotteryParticipationReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *UpdateLotteryParticipationReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateLotteryParticipationReq) GetIsWon() int64 {
	if x != nil {
		return x.IsWon
	}
	return 0
}

func (x *UpdateLotteryParticipationReq) GetPrizeId() int64 {
	if x != nil {
		return x.PrizeId
	}
	return 0
}

type UpdateLotteryParticipationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLotteryParticipationResp) Reset() {
	*x = UpdateLotteryParticipationResp{}
	mi := &file_lottery_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLotteryParticipationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLotteryParticipationResp) ProtoMessage() {}

func (x *UpdateLotteryParticipationResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLotteryParticipationResp.ProtoReflect.Descriptor instead.
func (*UpdateLotteryParticipationResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{15}
}

type DelLotteryParticipationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelLotteryParticipationReq) Reset() {
	*x = DelLotteryParticipationReq{}
	mi := &file_lottery_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelLotteryParticipationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelLotteryParticipationReq) ProtoMessage() {}

func (x *DelLotteryParticipationReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelLotteryParticipationReq.ProtoReflect.Descriptor instead.
func (*DelLotteryParticipationReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{16}
}

func (x *DelLotteryParticipationReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelLotteryParticipationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelLotteryParticipationResp) Reset() {
	*x = DelLotteryParticipationResp{}
	mi := &file_lottery_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelLotteryParticipationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelLotteryParticipationResp) ProtoMessage() {}

func (x *DelLotteryParticipationResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelLotteryParticipationResp.ProtoReflect.Descriptor instead.
func (*DelLotteryParticipationResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{17}
}

type GetLotteryParticipationByIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
	LotteryId     int64                  `protobuf:"varint,2,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"`
	UserId        int64                  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLotteryParticipationByIdReq) Reset() {
	*x = GetLotteryParticipationByIdReq{}
	mi := &file_lottery_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLotteryParticipationByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLotteryParticipationByIdReq) ProtoMessage() {}

func (x *GetLotteryParticipationByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLotteryParticipationByIdReq.ProtoReflect.Descriptor instead.
func (*GetLotteryParticipationByIdReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{18}
}

func (x *GetLotteryParticipationByIdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetLotteryParticipationByIdReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *GetLotteryParticipationByIdReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetLotteryParticipationByIdResp struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	LotteryParticipation *LotteryParticipation  `protobuf:"bytes,1,opt,name=lotteryParticipation,proto3" json:"lotteryParticipation,omitempty"` //lotteryParticipation
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetLotteryParticipationByIdResp) Reset() {
	*x = GetLotteryParticipationByIdResp{}
	mi := &file_lottery_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLotteryParticipationByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLotteryParticipationByIdResp) ProtoMessage() {}

func (x *GetLotteryParticipationByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLotteryParticipationByIdResp.ProtoReflect.Descriptor instead.
func (*GetLotteryParticipationByIdResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{19}
}

func (x *GetLotteryParticipationByIdResp) GetLotteryParticipation() *LotteryParticipation {
	if x != nil {
		return x.LotteryParticipation
	}
	return nil
}

type SearchLotteryParticipationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageSize      int64                  `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`     //page
	LastId        int64                  `protobuf:"varint,2,opt,name=lastId,proto3" json:"lastId,omitempty"`         //limit
	Id            int64                  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                 //涓婚敭
	LotteryId     int64                  `protobuf:"varint,4,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"`   //鍙備笌鐨勬娊濂栫殑id
	UserId        int64                  `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty"`         //鐢ㄦ埛id
	IsWon         int64                  `protobuf:"varint,6,opt,name=isWon,proto3" json:"isWon,omitempty"`           //涓浜嗗悧锛?
	PrizeId       int64                  `protobuf:"varint,7,opt,name=prizeId,proto3" json:"prizeId,omitempty"`       //濂栧搧id
	CreateTime    int64                  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"` //createTime
	UpdateTime    int64                  `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //updateTime
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchLotteryParticipationReq) Reset() {
	*x = SearchLotteryParticipationReq{}
	mi := &file_lottery_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLotteryParticipationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLotteryParticipationReq) ProtoMessage() {}

func (x *SearchLotteryParticipationReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLotteryParticipationReq.ProtoReflect.Descriptor instead.
func (*SearchLotteryParticipationReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{20}
}

func (x *SearchLotteryParticipationReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchLotteryParticipationReq) GetLastId() int64 {
	if x != nil {
		return x.LastId
	}
	return 0
}

func (x *SearchLotteryParticipationReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchLotteryParticipationReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *SearchLotteryParticipationReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchLotteryParticipationReq) GetIsWon() int64 {
	if x != nil {
		return x.IsWon
	}
	return 0
}

func (x *SearchLotteryParticipationReq) GetPrizeId() int64 {
	if x != nil {
		return x.PrizeId
	}
	return 0
}

func (x *SearchLotteryParticipationReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SearchLotteryParticipationReq) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type SearchLotteryParticipationResp struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	LotteryParticipation []*LotteryParticipation `protobuf:"bytes,1,rep,name=lotteryParticipation,proto3" json:"lotteryParticipation,omitempty"` //lotteryParticipation
	Count                int64                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SearchLotteryParticipationResp) Reset() {
	*x = SearchLotteryParticipationResp{}
	mi := &file_lottery_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLotteryParticipationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLotteryParticipationResp) ProtoMessage() {}

func (x *SearchLotteryParticipationResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLotteryParticipationResp.ProtoReflect.Descriptor instead.
func (*SearchLotteryParticipationResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{21}
}

func (x *SearchLotteryParticipationResp) GetLotteryParticipation() []*LotteryParticipation {
	if x != nil {
		return x.LotteryParticipation
	}
	return nil
}

func (x *SearchLotteryParticipationResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SearchLotteryParticipationWinReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LotteryId     int64                  `protobuf:"varint,1,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchLotteryParticipationWinReq) Reset() {
	*x = SearchLotteryParticipationWinReq{}
	mi := &file_lottery_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLotteryParticipationWinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLotteryParticipationWinReq) ProtoMessage() {}

func (x *SearchLotteryParticipationWinReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLotteryParticipationWinReq.ProtoReflect.Descriptor instead.
func (*SearchLotteryParticipationWinReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{22}
}

func (x *SearchLotteryParticipationWinReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

type SearchLotteryParticipationWinResp struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	LotteryParticipation []*LotteryParticipation `protobuf:"bytes,1,rep,name=lotteryParticipation,proto3" json:"lotteryParticipation,omitempty"` //lotteryParticipation
	Count                int64                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SearchLotteryParticipationWinResp) Reset() {
	*x = SearchLotteryParticipationWinResp{}
	mi := &file_lottery_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchLotteryParticipationWinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLotteryParticipationWinResp) ProtoMessage() {}

func (x *SearchLotteryParticipationWinResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLotteryParticipationWinResp.ProtoReflect.Descriptor instead.
func (*SearchLotteryParticipationWinResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{23}
}

func (x *SearchLotteryParticipationWinResp) GetLotteryParticipation() []*LotteryParticipation {
	if x != nil {
		return x.LotteryParticipation
	}
	return nil
}

func (x *SearchLotteryParticipationWinResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// --------------------------------濂栧搧琛?-------------------------------
type Prize struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                  //id
	LotteryId     int64                  `protobuf:"varint,2,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"`    //鎶藉ID
	Type          int64                  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`              //濂栧搧绫诲瀷锛?濂栧搧 2浼樻儬鍒?3鍏戞崲鐮?4鍟嗗煄 5寰俊绾㈠寘灏侀潰 6绾㈠寘
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`               //濂栧搧鍚嶇О
	Level         int64                  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`            //鍑犵瓑濂?榛樿1
	Thumb         string                 `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`             //濂栧搧鍥?
	Count         int64                  `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`            //濂栧搧浠芥暟
	GrantType     int64                  `protobuf:"varint,8,opt,name=grantType,proto3" json:"grantType,omitempty"`    //濂栧搧鍙戞斁鏂瑰紡锛?蹇€掗偖瀵?2璁╀腑濂栬€呰仈绯绘垜 3涓鑰呭～鍐欎俊鎭?4璺宠浆鍒板叾浠栧皬绋嬪簭
	CreateTime    int64                  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`  //createTime
	UpdateTime    int64                  `protobuf:"varint,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //updateTime
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Prize) Reset() {
	*x = Prize{}
	mi := &file_lottery_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Prize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prize) ProtoMessage() {}

func (x *Prize) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prize.ProtoReflect.Descriptor instead.
func (*Prize) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{24}
}

func (x *Prize) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Prize) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *Prize) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Prize) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Prize) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Prize) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *Prize) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Prize) GetGrantType() int64 {
	if x != nil {
		return x.GrantType
	}
	return 0
}

func (x *Prize) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Prize) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type AddPrizeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LotteryId     int64                  `protobuf:"varint,1,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"` //鎶藉ID
	Type          int64                  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`           //濂栧搧绫诲瀷锛?濂栧搧 2浼樻儬鍒?3鍏戞崲鐮?4鍟嗗煄 5寰俊绾㈠寘灏侀潰 6绾㈠寘
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`            //濂栧搧鍚嶇О
	Level         int64                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`         //鍑犵瓑濂?榛樿1
	Thumb         string                 `protobuf:"bytes,5,opt,name=thumb,proto3" json:"thumb,omitempty"`          //濂栧搧鍥?
	Count         int64                  `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`         //濂栧搧浠芥暟
	GrantType     int64                  `protobuf:"varint,7,opt,name=grantType,proto3" json:"grantType,omitempty"` //濂栧搧鍙戞斁鏂瑰紡锛?蹇€掗偖瀵?2璁╀腑濂栬€呰仈绯绘垜 3涓鑰呭～鍐欎俊鎭?4璺宠浆鍒板叾浠栧皬绋嬪簭
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPrizeReq) Reset() {
	*x = AddPrizeReq{}
	mi := &file_lottery_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPrizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPrizeReq) ProtoMessage() {}

func (x *AddPrizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPrizeReq.ProtoReflect.Descriptor instead.
func (*AddPrizeReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{25}
}

func (x *AddPrizeReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *AddPrizeReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AddPrizeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPrizeReq) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AddPrizeReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *AddPrizeReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddPrizeReq) GetGrantType() int64 {
	if x != nil {
		return x.GrantType
	}
	return 0
}

type AddPrizeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPrizeResp) Reset() {
	*x = AddPrizeResp{}
	mi := &file_lottery_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPrizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPrizeResp) ProtoMessage() {}

func (x *AddPrizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPrizeResp.ProtoReflect.Descriptor instead.
func (*AddPrizeResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{26}
}

type UpdatePrizeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               //id
	LotteryId     int64                  `protobuf:"varint,2,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"` //鎶藉ID
	Type          int64                  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`           //濂栧搧绫诲瀷锛?濂栧搧 2浼樻儬鍒?3鍏戞崲鐮?4鍟嗗煄 5寰俊绾㈠寘灏侀潰 6绾㈠寘
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`            //濂栧搧鍚嶇О
	Level         int64                  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`         //鍑犵瓑濂?榛樿1
	Thumb         string                 `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`          //濂栧搧鍥?
	Count         int64                  `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`         //濂栧搧浠芥暟
	GrantType     int64                  `protobuf:"varint,8,opt,name=grantType,proto3" json:"grantType,omitempty"` //濂栧搧鍙戞斁鏂瑰紡锛?蹇€掗偖瀵?2璁╀腑濂栬€呰仈绯绘垜 3涓鑰呭～鍐欎俊鎭?4璺宠浆鍒板叾浠栧皬绋嬪簭
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePrizeReq) Reset() {
	*x = UpdatePrizeReq{}
	mi := &file_lottery_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePrizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrizeReq) ProtoMessage() {}

func (x *UpdatePrizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrizeReq.ProtoReflect.Descriptor instead.
func (*UpdatePrizeReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{27}
}

func (x *UpdatePrizeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePrizeReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *UpdatePrizeReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdatePrizeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePrizeReq) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UpdatePrizeReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *UpdatePrizeReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UpdatePrizeReq) GetGrantType() int64 {
	if x != nil {
		return x.GrantType
	}
	return 0
}

type UpdatePrizeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePrizeResp) Reset() {
	*x = UpdatePrizeResp{}
	mi := &file_lottery_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePrizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrizeResp) ProtoMessage() {}

func (x *UpdatePrizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrizeResp.ProtoReflect.Descriptor instead.
func (*UpdatePrizeResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{28}
}

type DelPrizeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelPrizeReq) Reset() {
	*x = DelPrizeReq{}
	mi := &file_lottery_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelPrizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPrizeReq) ProtoMessage() {}

func (x *DelPrizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPrizeReq.ProtoReflect.Descriptor instead.
func (*DelPrizeReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{29}
}

func (x *DelPrizeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelPrizeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelPrizeResp) Reset() {
	*x = DelPrizeResp{}
	mi := &file_lottery_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelPrizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPrizeResp) ProtoMessage() {}

func (x *DelPrizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPrizeResp.ProtoReflect.Descriptor instead.
func (*DelPrizeResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{30}
}

type GetPrizeByIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPrizeByIdReq) Reset() {
	*x = GetPrizeByIdReq{}
	mi := &file_lottery_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPrizeByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrizeByIdReq) ProtoMessage() {}

func (x *GetPrizeByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrizeByIdReq.ProtoReflect.Descriptor instead.
func (*GetPrizeByIdReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{31}
}

func (x *GetPrizeByIdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPrizeByIdResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prize         *Prize                 `protobuf:"bytes,1,opt,name=prize,proto3" json:"prize,omitempty"` //prize
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPrizeByIdResp) Reset() {
	*x = GetPrizeByIdResp{}
	mi := &file_lottery_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPrizeByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrizeByIdResp) ProtoMessage() {}

func (x *GetPrizeByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrizeByIdResp.ProtoReflect.Descriptor instead.
func (*GetPrizeByIdResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{32}
}

func (x *GetPrizeByIdResp) GetPrize() *Prize {
	if x != nil {
		return x.Prize
	}
	return nil
}

type SearchPrizeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`              //page
	Limit         int64                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`            //limit
	Id            int64                  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                  //id
	LotteryId     int64                  `protobuf:"varint,4,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"`    //鎶藉ID
	Type          int64                  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`              //濂栧搧绫诲瀷锛?濂栧搧 2浼樻儬鍒?3鍏戞崲鐮?4鍟嗗煄 5寰俊绾㈠寘灏侀潰 6绾㈠寘
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`               //濂栧搧鍚嶇О
	Level         int64                  `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`            //鍑犵瓑濂?榛樿1
	Thumb         string                 `protobuf:"bytes,8,opt,name=thumb,proto3" json:"thumb,omitempty"`             //濂栧搧鍥?
	Count         int64                  `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`            //濂栧搧浠芥暟
	GrantType     int64                  `protobuf:"varint,10,opt,name=grantType,proto3" json:"grantType,omitempty"`   //濂栧搧鍙戞斁鏂瑰紡锛?蹇€掗偖瀵?2璁╀腑濂栬€呰仈绯绘垜 3涓鑰呭～鍐欎俊鎭?4璺宠浆鍒板叾浠栧皬绋嬪簭
	CreateTime    int64                  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"` //createTime
	UpdateTime    int64                  `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //updateTime
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchPrizeReq) Reset() {
	*x = SearchPrizeReq{}
	mi := &file_lottery_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchPrizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPrizeReq) ProtoMessage() {}

func (x *SearchPrizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPrizeReq.ProtoReflect.Descriptor instead.
func (*SearchPrizeReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{33}
}

func (x *SearchPrizeReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchPrizeReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchPrizeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchPrizeReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *SearchPrizeReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SearchPrizeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchPrizeReq) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SearchPrizeReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *SearchPrizeReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchPrizeReq) GetGrantType() int64 {
	if x != nil {
		return x.GrantType
	}
	return 0
}

func (x *SearchPrizeReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SearchPrizeReq) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type SearchPrizeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prize         []*Prize               `protobuf:"bytes,1,rep,name=prize,proto3" json:"prize,omitempty"` //prize
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchPrizeResp) Reset() {
	*x = SearchPrizeResp{}
	mi := &file_lottery_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchPrizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPrizeResp) ProtoMessage() {}

func (x *SearchPrizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPrizeResp.ProtoReflect.Descriptor instead.
func (*SearchPrizeResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{34}
}

func (x *SearchPrizeResp) GetPrize() []*Prize {
	if x != nil {
		return x.Prize
	}
	return nil
}

var File_lottery_proto protoreflect.FileDescriptor

var file_lottery_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x22, 0x89, 0x04, 0x0a, 0x07, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0xcf, 0x03, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x20, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xd2, 0x03, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69,
	0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1f, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x10,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x07, 0x6c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x22, 0xd4, 0x04, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x69, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x11, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25,
	0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x07, 0x6c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x7a, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x7a, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x57, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x64, 0x64,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x95, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x64,
	0x22, 0x20, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x66, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x1d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x57, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x7a, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x7a, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x20, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x21, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x0e, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc6, 0x01,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1d, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x1f, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65,
	0x22, 0xb0, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x32, 0x91, 0x09, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x12, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x63, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2d, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x36, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x08, 0x44, 0x65, 0x6c,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x72,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x42, 0x06, 0x5a, 0x04, 0x2e,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_lottery_proto_rawDescOnce sync.Once
	file_lottery_proto_rawDescData []byte
)

func file_lottery_proto_rawDescGZIP() []byte {
	file_lottery_proto_rawDescOnce.Do(func() {
		file_lottery_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_lottery_proto_rawDesc), len(file_lottery_proto_rawDesc)))
	})
	return file_lottery_proto_rawDescData
}

var file_lottery_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_lottery_proto_goTypes = []any{
	(*Lottery)(nil),                           // 0: pb.Lottery
	(*AddLotteryReq)(nil),                     // 1: pb.AddLotteryReq
	(*AddLotteryResp)(nil),                    // 2: pb.AddLotteryResp
	(*UpdateLotteryReq)(nil),                  // 3: pb.UpdateLotteryReq
	(*UpdateLotteryResp)(nil),                 // 4: pb.UpdateLotteryResp
	(*DelLotteryReq)(nil),                     // 5: pb.DelLotteryReq
	(*DelLotteryResp)(nil),                    // 6: pb.DelLotteryResp
	(*GetLotteryByIdReq)(nil),                 // 7: pb.GetLotteryByIdReq
	(*GetLotteryByIdResp)(nil),                // 8: pb.GetLotteryByIdResp
	(*SearchLotteryReq)(nil),                  // 9: pb.SearchLotteryReq
	(*SearchLotteryResp)(nil),                 // 10: pb.SearchLotteryResp
	(*LotteryParticipation)(nil),              // 11: pb.LotteryParticipation
	(*AddLotteryParticipationReq)(nil),        // 12: pb.AddLotteryParticipationReq
	(*AddLotteryParticipationResp)(nil),       // 13: pb.AddLotteryParticipationResp
	(*UpdateLotteryParticipationReq)(nil),     // 14: pb.UpdateLotteryParticipationReq
	(*UpdateLotteryParticipationResp)(nil),    // 15: pb.UpdateLotteryParticipationResp
	(*DelLotteryParticipationReq)(nil),        // 16: pb.DelLotteryParticipationReq
	(*DelLotteryParticipationResp)(nil),       // 17: pb.DelLotteryParticipationResp
	(*GetLotteryParticipationByIdReq)(nil),    // 18: pb.GetLotteryParticipationByIdReq
	(*GetLotteryParticipationByIdResp)(nil),   // 19: pb.GetLotteryParticipationByIdResp
	(*SearchLotteryParticipationReq)(nil),     // 20: pb.SearchLotteryParticipationReq
	(*SearchLotteryParticipationResp)(nil),    // 21: pb.SearchLotteryParticipationResp
	(*SearchLotteryParticipationWinReq)(nil),  // 22: pb.SearchLotteryParticipationWinReq
	(*SearchLotteryParticipationWinResp)(nil), // 23: pb.SearchLotteryParticipationWinResp
	(*Prize)(nil),                             // 24: pb.Prize
	(*AddPrizeReq)(nil),                       // 25: pb.AddPrizeReq
	(*AddPrizeResp)(nil),                      // 26: pb.AddPrizeResp
	(*UpdatePrizeReq)(nil),                    // 27: pb.UpdatePrizeReq
	(*UpdatePrizeResp)(nil),                   // 28: pb.UpdatePrizeResp
	(*DelPrizeReq)(nil),                       // 29: pb.DelPrizeReq
	(*DelPrizeResp)(nil),                      // 30: pb.DelPrizeResp
	(*GetPrizeByIdReq)(nil),                   // 31: pb.GetPrizeByIdReq
	(*GetPrizeByIdResp)(nil),                  // 32: pb.GetPrizeByIdResp
	(*SearchPrizeReq)(nil),                    // 33: pb.SearchPrizeReq
	(*SearchPrizeResp)(nil),                   // 34: pb.SearchPrizeResp
}
var file_lottery_proto_depIdxs = []int32{
	0,  // 0: pb.GetLotteryByIdResp.lottery:type_name -> pb.Lottery
	0,  // 1: pb.SearchLotteryResp.lottery:type_name -> pb.Lottery
	11, // 2: pb.GetLotteryParticipationByIdResp.lotteryParticipation:type_name -> pb.LotteryParticipation
	11, // 3: pb.SearchLotteryParticipationResp.lotteryParticipation:type_name -> pb.LotteryParticipation
	11, // 4: pb.SearchLotteryParticipationWinResp.lotteryParticipation:type_name -> pb.LotteryParticipation
	24, // 5: pb.GetPrizeByIdResp.prize:type_name -> pb.Prize
	24, // 6: pb.SearchPrizeResp.prize:type_name -> pb.Prize
	1,  // 7: pb.lottery.AddLottery:input_type -> pb.AddLotteryReq
	3,  // 8: pb.lottery.UpdateLottery:input_type -> pb.UpdateLotteryReq
	5,  // 9: pb.lottery.DelLottery:input_type -> pb.DelLotteryReq
	7,  // 10: pb.lottery.GetLotteryById:input_type -> pb.GetLotteryByIdReq
	9,  // 11: pb.lottery.SearchLottery:input_type -> pb.SearchLotteryReq
	12, // 12: pb.lottery.AddLotteryParticipation:input_type -> pb.AddLotteryParticipationReq
	14, // 13: pb.lottery.UpdateLotteryParticipation:input_type -> pb.UpdateLotteryParticipationReq
	16, // 14: pb.lottery.DelLotteryParticipation:input_type -> pb.DelLotteryParticipationReq
	18, // 15: pb.lottery.GetLotteryParticipationById:input_type -> pb.GetLotteryParticipationByIdReq
	20, // 16: pb.lottery.SearchLotteryParticipation:input_type -> pb.SearchLotteryParticipationReq
	22, // 17: pb.lottery.SearchLotteryParticipationWin:input_type -> pb.SearchLotteryParticipationWinReq
	25, // 18: pb.lottery.AddPrize:input_type -> pb.AddPrizeReq
	27, // 19: pb.lottery.UpdatePrize:input_type -> pb.UpdatePrizeReq
	29, // 20: pb.lottery.DelPrize:input_type -> pb.DelPrizeReq
	31, // 21: pb.lottery.GetPrizeById:input_type -> pb.GetPrizeByIdReq
	33, // 22: pb.lottery.SearchPrize:input_type -> pb.SearchPrizeReq
	2,  // 23: pb.lottery.AddLottery:output_type -> pb.AddLotteryResp
	4,  // 24: pb.lottery.UpdateLottery:output_type -> pb.UpdateLotteryResp
	6,  // 25: pb.lottery.DelLottery:output_type -> pb.DelLotteryResp
	8,  // 26: pb.lottery.GetLotteryById:output_type -> pb.GetLotteryByIdResp
	10, // 27: pb.lottery.SearchLottery:output_type -> pb.SearchLotteryResp
	13, // 28: pb.lottery.AddLotteryParticipation:output_type -> pb.AddLotteryParticipationResp
	15, // 29: pb.lottery.UpdateLotteryParticipation:output_type -> pb.UpdateLotteryParticipationResp
	17, // 30: pb.lottery.DelLotteryParticipation:output_type -> pb.DelLotteryParticipationResp
	19, // 31: pb.lottery.GetLotteryParticipationById:output_type -> pb.GetLotteryParticipationByIdResp
	21, // 32: pb.lottery.SearchLotteryParticipation:output_type -> pb.SearchLotteryParticipationResp
	23, // 33: pb.lottery.SearchLotteryParticipationWin:output_type -> pb.SearchLotteryParticipationWinResp
	26, // 34: pb.lottery.AddPrize:output_type -> pb.AddPrizeResp
	28, // 35: pb.lottery.UpdatePrize:output_type -> pb.UpdatePrizeResp
	30, // 36: pb.lottery.DelPrize:output_type -> pb.DelPrizeResp
	32, // 37: pb.lottery.GetPrizeById:output_type -> pb.GetPrizeByIdResp
	34, // 38: pb.lottery.SearchPrize:output_type -> pb.SearchPrizeResp
	23, // [23:39] is the sub-list for method output_type
	7,  // [7:23] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_lottery_proto_init() }
func file_lottery_proto_init() {
	if File_lottery_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_lottery_proto_rawDesc), len(file_lottery_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lottery_proto_goTypes,
		DependencyIndexes: file_lottery_proto_depIdxs,
		MessageInfos:      file_lottery_proto_msgTypes,
	}.Build()
	File_lottery_proto = out.File
	file_lottery_proto_goTypes = nil
	file_lottery_proto_depIdxs = nil
}
