// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: lottery.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// --------------------------------抽奖表--------------------------------
type Lottery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                       //id
	UserId        int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`               //发起抽奖用户ID
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                    //默认取一等奖名称
	Thumb         string `protobuf:"bytes,4,opt,name=thumb,proto3" json:"thumb,omitempty"`                  //默认取一等经配图
	PublishType   int64  `protobuf:"varint,5,opt,name=publishType,proto3" json:"publishType,omitempty"`     //开奖设置：1按时间开奖 2按人数开奖 3即抽即中
	PublishTime   int64  `protobuf:"varint,6,opt,name=publishTime,proto3" json:"publishTime,omitempty"`     //开奖时间
	JoinNumber    int64  `protobuf:"varint,7,opt,name=joinNumber,proto3" json:"joinNumber,omitempty"`       //自动开奖人数
	Introduce     string `protobuf:"bytes,8,opt,name=introduce,proto3" json:"introduce,omitempty"`          //抽奖说明
	AwardDeadline int64  `protobuf:"varint,9,opt,name=awardDeadline,proto3" json:"awardDeadline,omitempty"` //领奖截止时间
	CreateTime    int64  `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime,omitempty"`      //createTime
	UpdateTime    int64  `protobuf:"varint,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`      //updateTime
	IsSelected    int64  `protobuf:"varint,12,opt,name=isSelected,proto3" json:"isSelected,omitempty"`      //是否精选 1是 0否
}

func (x *Lottery) Reset() {
	*x = Lottery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lottery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lottery) ProtoMessage() {}

func (x *Lottery) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lottery.ProtoReflect.Descriptor instead.
func (*Lottery) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{0}
}

func (x *Lottery) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lottery) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Lottery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Lottery) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *Lottery) GetPublishType() int64 {
	if x != nil {
		return x.PublishType
	}
	return 0
}

func (x *Lottery) GetPublishTime() int64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *Lottery) GetJoinNumber() int64 {
	if x != nil {
		return x.JoinNumber
	}
	return 0
}

func (x *Lottery) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *Lottery) GetAwardDeadline() int64 {
	if x != nil {
		return x.AwardDeadline
	}
	return 0
}

func (x *Lottery) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Lottery) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Lottery) GetIsSelected() int64 {
	if x != nil {
		return x.IsSelected
	}
	return 0
}

type AddLotteryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`               //发起抽奖用户ID
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                    //默认取一等奖名称
	Thumb         string   `protobuf:"bytes,3,opt,name=thumb,proto3" json:"thumb,omitempty"`                  //默认取一等经配图
	PublishType   int64    `protobuf:"varint,4,opt,name=publishType,proto3" json:"publishType,omitempty"`     //开奖设置：1按时间开奖 2按人数开奖 3即抽即中
	PublishTime   int64    `protobuf:"varint,5,opt,name=publishTime,proto3" json:"publishTime,omitempty"`     //开奖时间
	JoinNumber    int64    `protobuf:"varint,6,opt,name=joinNumber,proto3" json:"joinNumber,omitempty"`       //自动开奖人数
	Introduce     string   `protobuf:"bytes,7,opt,name=introduce,proto3" json:"introduce,omitempty"`          //抽奖说明
	AwardDeadline int64    `protobuf:"varint,8,opt,name=awardDeadline,proto3" json:"awardDeadline,omitempty"` //领奖截止时间
	IsSelected    int64    `protobuf:"varint,9,opt,name=isSelected,proto3" json:"isSelected,omitempty"`       //是否精选 1是 0否
	Prizes        []*Prize `protobuf:"bytes,10,rep,name=prizes,proto3" json:"prizes,omitempty"`               //奖品 支持多个
}

func (x *AddLotteryReq) Reset() {
	*x = AddLotteryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLotteryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLotteryReq) ProtoMessage() {}

func (x *AddLotteryReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLotteryReq.ProtoReflect.Descriptor instead.
func (*AddLotteryReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{1}
}

func (x *AddLotteryReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddLotteryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddLotteryReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *AddLotteryReq) GetPublishType() int64 {
	if x != nil {
		return x.PublishType
	}
	return 0
}

func (x *AddLotteryReq) GetPublishTime() int64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *AddLotteryReq) GetJoinNumber() int64 {
	if x != nil {
		return x.JoinNumber
	}
	return 0
}

func (x *AddLotteryReq) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *AddLotteryReq) GetAwardDeadline() int64 {
	if x != nil {
		return x.AwardDeadline
	}
	return 0
}

func (x *AddLotteryReq) GetIsSelected() int64 {
	if x != nil {
		return x.IsSelected
	}
	return 0
}

func (x *AddLotteryReq) GetPrizes() []*Prize {
	if x != nil {
		return x.Prizes
	}
	return nil
}

type AddLotteryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //抽奖ID
}

func (x *AddLotteryResp) Reset() {
	*x = AddLotteryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLotteryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLotteryResp) ProtoMessage() {}

func (x *AddLotteryResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLotteryResp.ProtoReflect.Descriptor instead.
func (*AddLotteryResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{2}
}

func (x *AddLotteryResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateLotteryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                       //id
	UserId        int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`               //发起抽奖用户ID
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                    //默认取一等奖名称
	Thumb         string `protobuf:"bytes,4,opt,name=thumb,proto3" json:"thumb,omitempty"`                  //默认取一等经配图
	PublishType   int64  `protobuf:"varint,5,opt,name=publishType,proto3" json:"publishType,omitempty"`     //开奖设置：1按时间开奖 2按人数开奖 3即抽即中
	PublishTime   int64  `protobuf:"varint,6,opt,name=publishTime,proto3" json:"publishTime,omitempty"`     //开奖时间
	JoinNumber    int64  `protobuf:"varint,7,opt,name=joinNumber,proto3" json:"joinNumber,omitempty"`       //自动开奖人数
	Introduce     string `protobuf:"bytes,8,opt,name=introduce,proto3" json:"introduce,omitempty"`          //抽奖说明
	AwardDeadline int64  `protobuf:"varint,9,opt,name=awardDeadline,proto3" json:"awardDeadline,omitempty"` //领奖截止时间
	IsSelected    int64  `protobuf:"varint,10,opt,name=isSelected,proto3" json:"isSelected,omitempty"`      //是否精选 1是 0否
}

func (x *UpdateLotteryReq) Reset() {
	*x = UpdateLotteryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLotteryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLotteryReq) ProtoMessage() {}

func (x *UpdateLotteryReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLotteryReq.ProtoReflect.Descriptor instead.
func (*UpdateLotteryReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateLotteryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateLotteryReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateLotteryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateLotteryReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *UpdateLotteryReq) GetPublishType() int64 {
	if x != nil {
		return x.PublishType
	}
	return 0
}

func (x *UpdateLotteryReq) GetPublishTime() int64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *UpdateLotteryReq) GetJoinNumber() int64 {
	if x != nil {
		return x.JoinNumber
	}
	return 0
}

func (x *UpdateLotteryReq) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *UpdateLotteryReq) GetAwardDeadline() int64 {
	if x != nil {
		return x.AwardDeadline
	}
	return 0
}

func (x *UpdateLotteryReq) GetIsSelected() int64 {
	if x != nil {
		return x.IsSelected
	}
	return 0
}

type UpdateLotteryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateLotteryResp) Reset() {
	*x = UpdateLotteryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLotteryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLotteryResp) ProtoMessage() {}

func (x *UpdateLotteryResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLotteryResp.ProtoReflect.Descriptor instead.
func (*UpdateLotteryResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{4}
}

type DelLotteryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *DelLotteryReq) Reset() {
	*x = DelLotteryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelLotteryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelLotteryReq) ProtoMessage() {}

func (x *DelLotteryReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelLotteryReq.ProtoReflect.Descriptor instead.
func (*DelLotteryReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{5}
}

func (x *DelLotteryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelLotteryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelLotteryResp) Reset() {
	*x = DelLotteryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelLotteryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelLotteryResp) ProtoMessage() {}

func (x *DelLotteryResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelLotteryResp.ProtoReflect.Descriptor instead.
func (*DelLotteryResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{6}
}

type GetLotteryByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *GetLotteryByIdReq) Reset() {
	*x = GetLotteryByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLotteryByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLotteryByIdReq) ProtoMessage() {}

func (x *GetLotteryByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLotteryByIdReq.ProtoReflect.Descriptor instead.
func (*GetLotteryByIdReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{7}
}

func (x *GetLotteryByIdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetLotteryByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lottery *Lottery `protobuf:"bytes,1,opt,name=lottery,proto3" json:"lottery,omitempty"` //lottery
}

func (x *GetLotteryByIdResp) Reset() {
	*x = GetLotteryByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLotteryByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLotteryByIdResp) ProtoMessage() {}

func (x *GetLotteryByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLotteryByIdResp.ProtoReflect.Descriptor instead.
func (*GetLotteryByIdResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{8}
}

func (x *GetLotteryByIdResp) GetLottery() *Lottery {
	if x != nil {
		return x.Lottery
	}
	return nil
}

type SearchLotteryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                    //page
	Limit         int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                  //limit
	Id            int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                        //id
	UserId        int64  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`                //发起抽奖用户ID
	Name          string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                     //默认取一等奖名称
	Thumb         string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`                   //默认取一等经配图
	PublishType   int64  `protobuf:"varint,7,opt,name=publishType,proto3" json:"publishType,omitempty"`      //开奖设置：1按时间开奖 2按人数开奖 3即抽即中
	PublishTime   int64  `protobuf:"varint,8,opt,name=publishTime,proto3" json:"publishTime,omitempty"`      //开奖时间
	JoinNumber    int64  `protobuf:"varint,9,opt,name=joinNumber,proto3" json:"joinNumber,omitempty"`        //自动开奖人数
	Introduce     string `protobuf:"bytes,10,opt,name=introduce,proto3" json:"introduce,omitempty"`          //抽奖说明
	AwardDeadline int64  `protobuf:"varint,11,opt,name=awardDeadline,proto3" json:"awardDeadline,omitempty"` //领奖截止时间
	CreateTime    int64  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`       //createTime
	UpdateTime    int64  `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`       //updateTime
	IsSelected    int64  `protobuf:"varint,14,opt,name=isSelected,proto3" json:"isSelected,omitempty"`       //是否精选 1是 0否
}

func (x *SearchLotteryReq) Reset() {
	*x = SearchLotteryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLotteryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLotteryReq) ProtoMessage() {}

func (x *SearchLotteryReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLotteryReq.ProtoReflect.Descriptor instead.
func (*SearchLotteryReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{9}
}

func (x *SearchLotteryReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchLotteryReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchLotteryReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchLotteryReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SearchLotteryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchLotteryReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *SearchLotteryReq) GetPublishType() int64 {
	if x != nil {
		return x.PublishType
	}
	return 0
}

func (x *SearchLotteryReq) GetPublishTime() int64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *SearchLotteryReq) GetJoinNumber() int64 {
	if x != nil {
		return x.JoinNumber
	}
	return 0
}

func (x *SearchLotteryReq) GetIntroduce() string {
	if x != nil {
		return x.Introduce
	}
	return ""
}

func (x *SearchLotteryReq) GetAwardDeadline() int64 {
	if x != nil {
		return x.AwardDeadline
	}
	return 0
}

func (x *SearchLotteryReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SearchLotteryReq) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SearchLotteryReq) GetIsSelected() int64 {
	if x != nil {
		return x.IsSelected
	}
	return 0
}

type SearchLotteryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lottery []*Lottery `protobuf:"bytes,1,rep,name=lottery,proto3" json:"lottery,omitempty"` //lottery
}

func (x *SearchLotteryResp) Reset() {
	*x = SearchLotteryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchLotteryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchLotteryResp) ProtoMessage() {}

func (x *SearchLotteryResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchLotteryResp.ProtoReflect.Descriptor instead.
func (*SearchLotteryResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{10}
}

func (x *SearchLotteryResp) GetLottery() []*Lottery {
	if x != nil {
		return x.Lottery
	}
	return nil
}

// --------------------------------奖品表--------------------------------
type Prize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                  //id
	LotteryId  int64  `protobuf:"varint,2,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"`    //抽奖ID
	Type       int64  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`              //奖品类型：1奖品 2优惠券 3兑换码 4商城 5微信红包封面 6红包
	Name       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`               //奖品名称
	Level      int64  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`            //几等奖 默认1
	Thumb      string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`             //奖品图
	Count      int64  `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`            //奖品份数
	GrantType  int64  `protobuf:"varint,8,opt,name=grantType,proto3" json:"grantType,omitempty"`    //奖品发放方式：1快递邮寄 2让中奖者联系我 3中奖者填写信息 4跳转到其他小程序
	CreateTime int64  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`  //createTime
	UpdateTime int64  `protobuf:"varint,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //updateTime
}

func (x *Prize) Reset() {
	*x = Prize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prize) ProtoMessage() {}

func (x *Prize) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prize.ProtoReflect.Descriptor instead.
func (*Prize) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{11}
}

func (x *Prize) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Prize) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *Prize) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Prize) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Prize) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Prize) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *Prize) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Prize) GetGrantType() int64 {
	if x != nil {
		return x.GrantType
	}
	return 0
}

func (x *Prize) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Prize) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type AddPrizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotteryId int64  `protobuf:"varint,1,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"` //抽奖ID
	Type      int64  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`           //奖品类型：1奖品 2优惠券 3兑换码 4商城 5微信红包封面 6红包
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`            //奖品名称
	Level     int64  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`         //几等奖 默认1
	Thumb     string `protobuf:"bytes,5,opt,name=thumb,proto3" json:"thumb,omitempty"`          //奖品图
	Count     int64  `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`         //奖品份数
	GrantType int64  `protobuf:"varint,7,opt,name=grantType,proto3" json:"grantType,omitempty"` //奖品发放方式：1快递邮寄 2让中奖者联系我 3中奖者填写信息 4跳转到其他小程序
}

func (x *AddPrizeReq) Reset() {
	*x = AddPrizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPrizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPrizeReq) ProtoMessage() {}

func (x *AddPrizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPrizeReq.ProtoReflect.Descriptor instead.
func (*AddPrizeReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{12}
}

func (x *AddPrizeReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *AddPrizeReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AddPrizeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPrizeReq) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AddPrizeReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *AddPrizeReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddPrizeReq) GetGrantType() int64 {
	if x != nil {
		return x.GrantType
	}
	return 0
}

type AddPrizeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddPrizeResp) Reset() {
	*x = AddPrizeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPrizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPrizeResp) ProtoMessage() {}

func (x *AddPrizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPrizeResp.ProtoReflect.Descriptor instead.
func (*AddPrizeResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{13}
}

type UpdatePrizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               //id
	LotteryId int64  `protobuf:"varint,2,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"` //抽奖ID
	Type      int64  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`           //奖品类型：1奖品 2优惠券 3兑换码 4商城 5微信红包封面 6红包
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`            //奖品名称
	Level     int64  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`         //几等奖 默认1
	Thumb     string `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`          //奖品图
	Count     int64  `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`         //奖品份数
	GrantType int64  `protobuf:"varint,8,opt,name=grantType,proto3" json:"grantType,omitempty"` //奖品发放方式：1快递邮寄 2让中奖者联系我 3中奖者填写信息 4跳转到其他小程序
}

func (x *UpdatePrizeReq) Reset() {
	*x = UpdatePrizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrizeReq) ProtoMessage() {}

func (x *UpdatePrizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrizeReq.ProtoReflect.Descriptor instead.
func (*UpdatePrizeReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{14}
}

func (x *UpdatePrizeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePrizeReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *UpdatePrizeReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdatePrizeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePrizeReq) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UpdatePrizeReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *UpdatePrizeReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UpdatePrizeReq) GetGrantType() int64 {
	if x != nil {
		return x.GrantType
	}
	return 0
}

type UpdatePrizeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePrizeResp) Reset() {
	*x = UpdatePrizeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrizeResp) ProtoMessage() {}

func (x *UpdatePrizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrizeResp.ProtoReflect.Descriptor instead.
func (*UpdatePrizeResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{15}
}

type DelPrizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *DelPrizeReq) Reset() {
	*x = DelPrizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPrizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPrizeReq) ProtoMessage() {}

func (x *DelPrizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPrizeReq.ProtoReflect.Descriptor instead.
func (*DelPrizeReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{16}
}

func (x *DelPrizeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelPrizeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelPrizeResp) Reset() {
	*x = DelPrizeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPrizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPrizeResp) ProtoMessage() {}

func (x *DelPrizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPrizeResp.ProtoReflect.Descriptor instead.
func (*DelPrizeResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{17}
}

type GetPrizeByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //id
}

func (x *GetPrizeByIdReq) Reset() {
	*x = GetPrizeByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrizeByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrizeByIdReq) ProtoMessage() {}

func (x *GetPrizeByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrizeByIdReq.ProtoReflect.Descriptor instead.
func (*GetPrizeByIdReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{18}
}

func (x *GetPrizeByIdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPrizeByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prize *Prize `protobuf:"bytes,1,opt,name=prize,proto3" json:"prize,omitempty"` //prize
}

func (x *GetPrizeByIdResp) Reset() {
	*x = GetPrizeByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrizeByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrizeByIdResp) ProtoMessage() {}

func (x *GetPrizeByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrizeByIdResp.ProtoReflect.Descriptor instead.
func (*GetPrizeByIdResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{19}
}

func (x *GetPrizeByIdResp) GetPrize() *Prize {
	if x != nil {
		return x.Prize
	}
	return nil
}

type SearchPrizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`              //page
	Limit      int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`            //limit
	Id         int64  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                  //id
	LotteryId  int64  `protobuf:"varint,4,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"`    //抽奖ID
	Type       int64  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`              //奖品类型：1奖品 2优惠券 3兑换码 4商城 5微信红包封面 6红包
	Name       string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`               //奖品名称
	Level      int64  `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`            //几等奖 默认1
	Thumb      string `protobuf:"bytes,8,opt,name=thumb,proto3" json:"thumb,omitempty"`             //奖品图
	Count      int64  `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`            //奖品份数
	GrantType  int64  `protobuf:"varint,10,opt,name=grantType,proto3" json:"grantType,omitempty"`   //奖品发放方式：1快递邮寄 2让中奖者联系我 3中奖者填写信息 4跳转到其他小程序
	CreateTime int64  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"` //createTime
	UpdateTime int64  `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"` //updateTime
}

func (x *SearchPrizeReq) Reset() {
	*x = SearchPrizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPrizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPrizeReq) ProtoMessage() {}

func (x *SearchPrizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPrizeReq.ProtoReflect.Descriptor instead.
func (*SearchPrizeReq) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{20}
}

func (x *SearchPrizeReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchPrizeReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchPrizeReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchPrizeReq) GetLotteryId() int64 {
	if x != nil {
		return x.LotteryId
	}
	return 0
}

func (x *SearchPrizeReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SearchPrizeReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchPrizeReq) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SearchPrizeReq) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *SearchPrizeReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchPrizeReq) GetGrantType() int64 {
	if x != nil {
		return x.GrantType
	}
	return 0
}

func (x *SearchPrizeReq) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SearchPrizeReq) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type SearchPrizeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prize []*Prize `protobuf:"bytes,1,rep,name=prize,proto3" json:"prize,omitempty"` //prize
}

func (x *SearchPrizeResp) Reset() {
	*x = SearchPrizeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lottery_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPrizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPrizeResp) ProtoMessage() {}

func (x *SearchPrizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_lottery_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPrizeResp.ProtoReflect.Descriptor instead.
func (*SearchPrizeResp) Descriptor() ([]byte, []int) {
	return file_lottery_proto_rawDescGZIP(), []int{21}
}

func (x *SearchPrizeResp) GetPrize() []*Prize {
	if x != nil {
		return x.Prize
	}
	return nil
}

var File_lottery_proto protoreflect.FileDescriptor

var file_lottery_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x22, 0xe3, 0x02, 0x0a, 0x07, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x0d, 0x41, 0x64,
	0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x06, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1f,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x10, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x07,
	0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x22, 0x96, 0x03, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6a, 0x6f,
	0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x3a, 0x0a, 0x11,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x25, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52,
	0x07, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x22, 0xfd, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x0e,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0xc6,
	0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1d, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1f, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x7a,
	0x65, 0x22, 0xb0, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x32, 0xb9, 0x04, 0x0a, 0x07, 0x6c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x12, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a,
	0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2d, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x39, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lottery_proto_rawDescOnce sync.Once
	file_lottery_proto_rawDescData = file_lottery_proto_rawDesc
)

func file_lottery_proto_rawDescGZIP() []byte {
	file_lottery_proto_rawDescOnce.Do(func() {
		file_lottery_proto_rawDescData = protoimpl.X.CompressGZIP(file_lottery_proto_rawDescData)
	})
	return file_lottery_proto_rawDescData
}

var file_lottery_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_lottery_proto_goTypes = []interface{}{
	(*Lottery)(nil),            // 0: pb.Lottery
	(*AddLotteryReq)(nil),      // 1: pb.AddLotteryReq
	(*AddLotteryResp)(nil),     // 2: pb.AddLotteryResp
	(*UpdateLotteryReq)(nil),   // 3: pb.UpdateLotteryReq
	(*UpdateLotteryResp)(nil),  // 4: pb.UpdateLotteryResp
	(*DelLotteryReq)(nil),      // 5: pb.DelLotteryReq
	(*DelLotteryResp)(nil),     // 6: pb.DelLotteryResp
	(*GetLotteryByIdReq)(nil),  // 7: pb.GetLotteryByIdReq
	(*GetLotteryByIdResp)(nil), // 8: pb.GetLotteryByIdResp
	(*SearchLotteryReq)(nil),   // 9: pb.SearchLotteryReq
	(*SearchLotteryResp)(nil),  // 10: pb.SearchLotteryResp
	(*Prize)(nil),              // 11: pb.Prize
	(*AddPrizeReq)(nil),        // 12: pb.AddPrizeReq
	(*AddPrizeResp)(nil),       // 13: pb.AddPrizeResp
	(*UpdatePrizeReq)(nil),     // 14: pb.UpdatePrizeReq
	(*UpdatePrizeResp)(nil),    // 15: pb.UpdatePrizeResp
	(*DelPrizeReq)(nil),        // 16: pb.DelPrizeReq
	(*DelPrizeResp)(nil),       // 17: pb.DelPrizeResp
	(*GetPrizeByIdReq)(nil),    // 18: pb.GetPrizeByIdReq
	(*GetPrizeByIdResp)(nil),   // 19: pb.GetPrizeByIdResp
	(*SearchPrizeReq)(nil),     // 20: pb.SearchPrizeReq
	(*SearchPrizeResp)(nil),    // 21: pb.SearchPrizeResp
}
var file_lottery_proto_depIdxs = []int32{
	11, // 0: pb.AddLotteryReq.prizes:type_name -> pb.Prize
	0,  // 1: pb.GetLotteryByIdResp.lottery:type_name -> pb.Lottery
	0,  // 2: pb.SearchLotteryResp.lottery:type_name -> pb.Lottery
	11, // 3: pb.GetPrizeByIdResp.prize:type_name -> pb.Prize
	11, // 4: pb.SearchPrizeResp.prize:type_name -> pb.Prize
	1,  // 5: pb.lottery.AddLottery:input_type -> pb.AddLotteryReq
	3,  // 6: pb.lottery.UpdateLottery:input_type -> pb.UpdateLotteryReq
	5,  // 7: pb.lottery.DelLottery:input_type -> pb.DelLotteryReq
	7,  // 8: pb.lottery.GetLotteryById:input_type -> pb.GetLotteryByIdReq
	9,  // 9: pb.lottery.SearchLottery:input_type -> pb.SearchLotteryReq
	12, // 10: pb.lottery.AddPrize:input_type -> pb.AddPrizeReq
	14, // 11: pb.lottery.UpdatePrize:input_type -> pb.UpdatePrizeReq
	16, // 12: pb.lottery.DelPrize:input_type -> pb.DelPrizeReq
	18, // 13: pb.lottery.GetPrizeById:input_type -> pb.GetPrizeByIdReq
	20, // 14: pb.lottery.SearchPrize:input_type -> pb.SearchPrizeReq
	2,  // 15: pb.lottery.AddLottery:output_type -> pb.AddLotteryResp
	4,  // 16: pb.lottery.UpdateLottery:output_type -> pb.UpdateLotteryResp
	6,  // 17: pb.lottery.DelLottery:output_type -> pb.DelLotteryResp
	8,  // 18: pb.lottery.GetLotteryById:output_type -> pb.GetLotteryByIdResp
	10, // 19: pb.lottery.SearchLottery:output_type -> pb.SearchLotteryResp
	13, // 20: pb.lottery.AddPrize:output_type -> pb.AddPrizeResp
	15, // 21: pb.lottery.UpdatePrize:output_type -> pb.UpdatePrizeResp
	17, // 22: pb.lottery.DelPrize:output_type -> pb.DelPrizeResp
	19, // 23: pb.lottery.GetPrizeById:output_type -> pb.GetPrizeByIdResp
	21, // 24: pb.lottery.SearchPrize:output_type -> pb.SearchPrizeResp
	15, // [15:25] is the sub-list for method output_type
	5,  // [5:15] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_lottery_proto_init() }
func file_lottery_proto_init() {
	if File_lottery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lottery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lottery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLotteryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLotteryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLotteryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLotteryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelLotteryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelLotteryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLotteryByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLotteryByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLotteryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchLotteryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPrizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPrizeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePrizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePrizeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPrizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPrizeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrizeByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrizeByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPrizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lottery_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPrizeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lottery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lottery_proto_goTypes,
		DependencyIndexes: file_lottery_proto_depIdxs,
		MessageInfos:      file_lottery_proto_msgTypes,
	}.Build()
	File_lottery_proto = out.File
	file_lottery_proto_rawDesc = nil
	file_lottery_proto_goTypes = nil
	file_lottery_proto_depIdxs = nil
}
