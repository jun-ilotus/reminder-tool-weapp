// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: recode.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Recode_AddItems_FullMethodName      = "/pb.recode/AddItems"
	Recode_UpdateItems_FullMethodName   = "/pb.recode/UpdateItems"
	Recode_DelItems_FullMethodName      = "/pb.recode/DelItems"
	Recode_GetItemsById_FullMethodName  = "/pb.recode/GetItemsById"
	Recode_SearchItems_FullMethodName   = "/pb.recode/SearchItems"
	Recode_AddRecode_FullMethodName     = "/pb.recode/AddRecode"
	Recode_UpdateRecode_FullMethodName  = "/pb.recode/UpdateRecode"
	Recode_DelRecode_FullMethodName     = "/pb.recode/DelRecode"
	Recode_GetRecodeById_FullMethodName = "/pb.recode/GetRecodeById"
	Recode_SearchRecode_FullMethodName  = "/pb.recode/SearchRecode"
)

// RecodeClient is the client API for Recode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecodeClient interface {
	// -----------------------items-----------------------
	AddItems(ctx context.Context, in *AddItemsReq, opts ...grpc.CallOption) (*AddItemsResp, error)
	UpdateItems(ctx context.Context, in *UpdateItemsReq, opts ...grpc.CallOption) (*UpdateItemsResp, error)
	DelItems(ctx context.Context, in *DelItemsReq, opts ...grpc.CallOption) (*DelItemsResp, error)
	GetItemsById(ctx context.Context, in *GetItemsByIdReq, opts ...grpc.CallOption) (*GetItemsByIdResp, error)
	SearchItems(ctx context.Context, in *SearchItemsReq, opts ...grpc.CallOption) (*SearchItemsResp, error)
	// -----------------------recode-----------------------
	AddRecode(ctx context.Context, in *AddRecodeReq, opts ...grpc.CallOption) (*AddRecodeResp, error)
	UpdateRecode(ctx context.Context, in *UpdateRecodeReq, opts ...grpc.CallOption) (*UpdateRecodeResp, error)
	DelRecode(ctx context.Context, in *DelRecodeReq, opts ...grpc.CallOption) (*DelRecodeResp, error)
	GetRecodeById(ctx context.Context, in *GetRecodeByIdReq, opts ...grpc.CallOption) (*GetRecodeByIdResp, error)
	SearchRecode(ctx context.Context, in *SearchRecodeReq, opts ...grpc.CallOption) (*SearchRecodeResp, error)
}

type recodeClient struct {
	cc grpc.ClientConnInterface
}

func NewRecodeClient(cc grpc.ClientConnInterface) RecodeClient {
	return &recodeClient{cc}
}

func (c *recodeClient) AddItems(ctx context.Context, in *AddItemsReq, opts ...grpc.CallOption) (*AddItemsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddItemsResp)
	err := c.cc.Invoke(ctx, Recode_AddItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recodeClient) UpdateItems(ctx context.Context, in *UpdateItemsReq, opts ...grpc.CallOption) (*UpdateItemsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateItemsResp)
	err := c.cc.Invoke(ctx, Recode_UpdateItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recodeClient) DelItems(ctx context.Context, in *DelItemsReq, opts ...grpc.CallOption) (*DelItemsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelItemsResp)
	err := c.cc.Invoke(ctx, Recode_DelItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recodeClient) GetItemsById(ctx context.Context, in *GetItemsByIdReq, opts ...grpc.CallOption) (*GetItemsByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemsByIdResp)
	err := c.cc.Invoke(ctx, Recode_GetItemsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recodeClient) SearchItems(ctx context.Context, in *SearchItemsReq, opts ...grpc.CallOption) (*SearchItemsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchItemsResp)
	err := c.cc.Invoke(ctx, Recode_SearchItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recodeClient) AddRecode(ctx context.Context, in *AddRecodeReq, opts ...grpc.CallOption) (*AddRecodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRecodeResp)
	err := c.cc.Invoke(ctx, Recode_AddRecode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recodeClient) UpdateRecode(ctx context.Context, in *UpdateRecodeReq, opts ...grpc.CallOption) (*UpdateRecodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecodeResp)
	err := c.cc.Invoke(ctx, Recode_UpdateRecode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recodeClient) DelRecode(ctx context.Context, in *DelRecodeReq, opts ...grpc.CallOption) (*DelRecodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelRecodeResp)
	err := c.cc.Invoke(ctx, Recode_DelRecode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recodeClient) GetRecodeById(ctx context.Context, in *GetRecodeByIdReq, opts ...grpc.CallOption) (*GetRecodeByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecodeByIdResp)
	err := c.cc.Invoke(ctx, Recode_GetRecodeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recodeClient) SearchRecode(ctx context.Context, in *SearchRecodeReq, opts ...grpc.CallOption) (*SearchRecodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRecodeResp)
	err := c.cc.Invoke(ctx, Recode_SearchRecode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecodeServer is the server API for Recode service.
// All implementations must embed UnimplementedRecodeServer
// for forward compatibility.
type RecodeServer interface {
	// -----------------------items-----------------------
	AddItems(context.Context, *AddItemsReq) (*AddItemsResp, error)
	UpdateItems(context.Context, *UpdateItemsReq) (*UpdateItemsResp, error)
	DelItems(context.Context, *DelItemsReq) (*DelItemsResp, error)
	GetItemsById(context.Context, *GetItemsByIdReq) (*GetItemsByIdResp, error)
	SearchItems(context.Context, *SearchItemsReq) (*SearchItemsResp, error)
	// -----------------------recode-----------------------
	AddRecode(context.Context, *AddRecodeReq) (*AddRecodeResp, error)
	UpdateRecode(context.Context, *UpdateRecodeReq) (*UpdateRecodeResp, error)
	DelRecode(context.Context, *DelRecodeReq) (*DelRecodeResp, error)
	GetRecodeById(context.Context, *GetRecodeByIdReq) (*GetRecodeByIdResp, error)
	SearchRecode(context.Context, *SearchRecodeReq) (*SearchRecodeResp, error)
	mustEmbedUnimplementedRecodeServer()
}

// UnimplementedRecodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecodeServer struct{}

func (UnimplementedRecodeServer) AddItems(context.Context, *AddItemsReq) (*AddItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItems not implemented")
}
func (UnimplementedRecodeServer) UpdateItems(context.Context, *UpdateItemsReq) (*UpdateItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItems not implemented")
}
func (UnimplementedRecodeServer) DelItems(context.Context, *DelItemsReq) (*DelItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelItems not implemented")
}
func (UnimplementedRecodeServer) GetItemsById(context.Context, *GetItemsByIdReq) (*GetItemsByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsById not implemented")
}
func (UnimplementedRecodeServer) SearchItems(context.Context, *SearchItemsReq) (*SearchItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItems not implemented")
}
func (UnimplementedRecodeServer) AddRecode(context.Context, *AddRecodeReq) (*AddRecodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecode not implemented")
}
func (UnimplementedRecodeServer) UpdateRecode(context.Context, *UpdateRecodeReq) (*UpdateRecodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecode not implemented")
}
func (UnimplementedRecodeServer) DelRecode(context.Context, *DelRecodeReq) (*DelRecodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRecode not implemented")
}
func (UnimplementedRecodeServer) GetRecodeById(context.Context, *GetRecodeByIdReq) (*GetRecodeByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecodeById not implemented")
}
func (UnimplementedRecodeServer) SearchRecode(context.Context, *SearchRecodeReq) (*SearchRecodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecode not implemented")
}
func (UnimplementedRecodeServer) mustEmbedUnimplementedRecodeServer() {}
func (UnimplementedRecodeServer) testEmbeddedByValue()                {}

// UnsafeRecodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecodeServer will
// result in compilation errors.
type UnsafeRecodeServer interface {
	mustEmbedUnimplementedRecodeServer()
}

func RegisterRecodeServer(s grpc.ServiceRegistrar, srv RecodeServer) {
	// If the following call pancis, it indicates UnimplementedRecodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Recode_ServiceDesc, srv)
}

func _Recode_AddItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodeServer).AddItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recode_AddItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodeServer).AddItems(ctx, req.(*AddItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recode_UpdateItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodeServer).UpdateItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recode_UpdateItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodeServer).UpdateItems(ctx, req.(*UpdateItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recode_DelItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodeServer).DelItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recode_DelItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodeServer).DelItems(ctx, req.(*DelItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recode_GetItemsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodeServer).GetItemsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recode_GetItemsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodeServer).GetItemsById(ctx, req.(*GetItemsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recode_SearchItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodeServer).SearchItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recode_SearchItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodeServer).SearchItems(ctx, req.(*SearchItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recode_AddRecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodeServer).AddRecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recode_AddRecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodeServer).AddRecode(ctx, req.(*AddRecodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recode_UpdateRecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodeServer).UpdateRecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recode_UpdateRecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodeServer).UpdateRecode(ctx, req.(*UpdateRecodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recode_DelRecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRecodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodeServer).DelRecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recode_DelRecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodeServer).DelRecode(ctx, req.(*DelRecodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recode_GetRecodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecodeByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodeServer).GetRecodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recode_GetRecodeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodeServer).GetRecodeById(ctx, req.(*GetRecodeByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recode_SearchRecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRecodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecodeServer).SearchRecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recode_SearchRecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecodeServer).SearchRecode(ctx, req.(*SearchRecodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Recode_ServiceDesc is the grpc.ServiceDesc for Recode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.recode",
	HandlerType: (*RecodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItems",
			Handler:    _Recode_AddItems_Handler,
		},
		{
			MethodName: "UpdateItems",
			Handler:    _Recode_UpdateItems_Handler,
		},
		{
			MethodName: "DelItems",
			Handler:    _Recode_DelItems_Handler,
		},
		{
			MethodName: "GetItemsById",
			Handler:    _Recode_GetItemsById_Handler,
		},
		{
			MethodName: "SearchItems",
			Handler:    _Recode_SearchItems_Handler,
		},
		{
			MethodName: "AddRecode",
			Handler:    _Recode_AddRecode_Handler,
		},
		{
			MethodName: "UpdateRecode",
			Handler:    _Recode_UpdateRecode_Handler,
		},
		{
			MethodName: "DelRecode",
			Handler:    _Recode_DelRecode_Handler,
		},
		{
			MethodName: "GetRecodeById",
			Handler:    _Recode_GetRecodeById_Handler,
		},
		{
			MethodName: "SearchRecode",
			Handler:    _Recode_SearchRecode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recode.proto",
}
