// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: signin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Signin_AddRecode_FullMethodName             = "/pb.signin/AddRecode"
	Signin_AddRecodeRollback_FullMethodName     = "/pb.signin/AddRecodeRollback"
	Signin_UpdateRecode_FullMethodName          = "/pb.signin/UpdateRecode"
	Signin_DelRecode_FullMethodName             = "/pb.signin/DelRecode"
	Signin_GetRecodeById_FullMethodName         = "/pb.signin/GetRecodeById"
	Signin_SearchRecode_FullMethodName          = "/pb.signin/SearchRecode"
	Signin_AddTask_FullMethodName               = "/pb.signin/AddTask"
	Signin_UpdateTask_FullMethodName            = "/pb.signin/UpdateTask"
	Signin_DelTask_FullMethodName               = "/pb.signin/DelTask"
	Signin_GetTaskById_FullMethodName           = "/pb.signin/GetTaskById"
	Signin_SearchTask_FullMethodName            = "/pb.signin/SearchTask"
	Signin_AddTaskFinish_FullMethodName         = "/pb.signin/AddTaskFinish"
	Signin_AddTaskFinishRollback_FullMethodName = "/pb.signin/AddTaskFinishRollback"
	Signin_UpdateTaskFinish_FullMethodName      = "/pb.signin/UpdateTaskFinish"
	Signin_DelTaskFinish_FullMethodName         = "/pb.signin/DelTaskFinish"
	Signin_GetTaskFinishById_FullMethodName     = "/pb.signin/GetTaskFinishById"
	Signin_SearchTaskFinish_FullMethodName      = "/pb.signin/SearchTaskFinish"
)

// SigninClient is the client API for Signin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SigninClient interface {
	// -----------------------recode-----------------------
	AddRecode(ctx context.Context, in *AddRecodeReq, opts ...grpc.CallOption) (*AddRecodeResp, error)
	AddRecodeRollback(ctx context.Context, in *AddRecodeReq, opts ...grpc.CallOption) (*AddRecodeResp, error)
	UpdateRecode(ctx context.Context, in *UpdateRecodeReq, opts ...grpc.CallOption) (*UpdateRecodeResp, error)
	DelRecode(ctx context.Context, in *DelRecodeReq, opts ...grpc.CallOption) (*DelRecodeResp, error)
	GetRecodeById(ctx context.Context, in *GetRecodeByIdReq, opts ...grpc.CallOption) (*GetRecodeByIdResp, error)
	SearchRecode(ctx context.Context, in *SearchRecodeReq, opts ...grpc.CallOption) (*SearchRecodeResp, error)
	// -----------------------task-----------------------
	AddTask(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*AddTaskResp, error)
	UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*UpdateTaskResp, error)
	DelTask(ctx context.Context, in *DelTaskReq, opts ...grpc.CallOption) (*DelTaskResp, error)
	GetTaskById(ctx context.Context, in *GetTaskByIdReq, opts ...grpc.CallOption) (*GetTaskByIdResp, error)
	SearchTask(ctx context.Context, in *SearchTaskReq, opts ...grpc.CallOption) (*SearchTaskResp, error)
	// -----------------------taskFinish-----------------------
	AddTaskFinish(ctx context.Context, in *AddTaskFinishReq, opts ...grpc.CallOption) (*AddTaskFinishResp, error)
	AddTaskFinishRollback(ctx context.Context, in *AddTaskFinishReq, opts ...grpc.CallOption) (*AddTaskFinishResp, error)
	UpdateTaskFinish(ctx context.Context, in *UpdateTaskFinishReq, opts ...grpc.CallOption) (*UpdateTaskFinishResp, error)
	DelTaskFinish(ctx context.Context, in *DelTaskFinishReq, opts ...grpc.CallOption) (*DelTaskFinishResp, error)
	GetTaskFinishById(ctx context.Context, in *GetTaskFinishByIdReq, opts ...grpc.CallOption) (*GetTaskFinishByIdResp, error)
	SearchTaskFinish(ctx context.Context, in *SearchTaskFinishReq, opts ...grpc.CallOption) (*SearchTaskFinishResp, error)
}

type signinClient struct {
	cc grpc.ClientConnInterface
}

func NewSigninClient(cc grpc.ClientConnInterface) SigninClient {
	return &signinClient{cc}
}

func (c *signinClient) AddRecode(ctx context.Context, in *AddRecodeReq, opts ...grpc.CallOption) (*AddRecodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRecodeResp)
	err := c.cc.Invoke(ctx, Signin_AddRecode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) AddRecodeRollback(ctx context.Context, in *AddRecodeReq, opts ...grpc.CallOption) (*AddRecodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRecodeResp)
	err := c.cc.Invoke(ctx, Signin_AddRecodeRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) UpdateRecode(ctx context.Context, in *UpdateRecodeReq, opts ...grpc.CallOption) (*UpdateRecodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecodeResp)
	err := c.cc.Invoke(ctx, Signin_UpdateRecode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) DelRecode(ctx context.Context, in *DelRecodeReq, opts ...grpc.CallOption) (*DelRecodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelRecodeResp)
	err := c.cc.Invoke(ctx, Signin_DelRecode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) GetRecodeById(ctx context.Context, in *GetRecodeByIdReq, opts ...grpc.CallOption) (*GetRecodeByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecodeByIdResp)
	err := c.cc.Invoke(ctx, Signin_GetRecodeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) SearchRecode(ctx context.Context, in *SearchRecodeReq, opts ...grpc.CallOption) (*SearchRecodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRecodeResp)
	err := c.cc.Invoke(ctx, Signin_SearchRecode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) AddTask(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*AddTaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTaskResp)
	err := c.cc.Invoke(ctx, Signin_AddTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*UpdateTaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskResp)
	err := c.cc.Invoke(ctx, Signin_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) DelTask(ctx context.Context, in *DelTaskReq, opts ...grpc.CallOption) (*DelTaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelTaskResp)
	err := c.cc.Invoke(ctx, Signin_DelTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) GetTaskById(ctx context.Context, in *GetTaskByIdReq, opts ...grpc.CallOption) (*GetTaskByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskByIdResp)
	err := c.cc.Invoke(ctx, Signin_GetTaskById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) SearchTask(ctx context.Context, in *SearchTaskReq, opts ...grpc.CallOption) (*SearchTaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTaskResp)
	err := c.cc.Invoke(ctx, Signin_SearchTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) AddTaskFinish(ctx context.Context, in *AddTaskFinishReq, opts ...grpc.CallOption) (*AddTaskFinishResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTaskFinishResp)
	err := c.cc.Invoke(ctx, Signin_AddTaskFinish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) AddTaskFinishRollback(ctx context.Context, in *AddTaskFinishReq, opts ...grpc.CallOption) (*AddTaskFinishResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTaskFinishResp)
	err := c.cc.Invoke(ctx, Signin_AddTaskFinishRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) UpdateTaskFinish(ctx context.Context, in *UpdateTaskFinishReq, opts ...grpc.CallOption) (*UpdateTaskFinishResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskFinishResp)
	err := c.cc.Invoke(ctx, Signin_UpdateTaskFinish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) DelTaskFinish(ctx context.Context, in *DelTaskFinishReq, opts ...grpc.CallOption) (*DelTaskFinishResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelTaskFinishResp)
	err := c.cc.Invoke(ctx, Signin_DelTaskFinish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) GetTaskFinishById(ctx context.Context, in *GetTaskFinishByIdReq, opts ...grpc.CallOption) (*GetTaskFinishByIdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskFinishByIdResp)
	err := c.cc.Invoke(ctx, Signin_GetTaskFinishById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signinClient) SearchTaskFinish(ctx context.Context, in *SearchTaskFinishReq, opts ...grpc.CallOption) (*SearchTaskFinishResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTaskFinishResp)
	err := c.cc.Invoke(ctx, Signin_SearchTaskFinish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SigninServer is the server API for Signin service.
// All implementations must embed UnimplementedSigninServer
// for forward compatibility.
type SigninServer interface {
	// -----------------------recode-----------------------
	AddRecode(context.Context, *AddRecodeReq) (*AddRecodeResp, error)
	AddRecodeRollback(context.Context, *AddRecodeReq) (*AddRecodeResp, error)
	UpdateRecode(context.Context, *UpdateRecodeReq) (*UpdateRecodeResp, error)
	DelRecode(context.Context, *DelRecodeReq) (*DelRecodeResp, error)
	GetRecodeById(context.Context, *GetRecodeByIdReq) (*GetRecodeByIdResp, error)
	SearchRecode(context.Context, *SearchRecodeReq) (*SearchRecodeResp, error)
	// -----------------------task-----------------------
	AddTask(context.Context, *AddTaskReq) (*AddTaskResp, error)
	UpdateTask(context.Context, *UpdateTaskReq) (*UpdateTaskResp, error)
	DelTask(context.Context, *DelTaskReq) (*DelTaskResp, error)
	GetTaskById(context.Context, *GetTaskByIdReq) (*GetTaskByIdResp, error)
	SearchTask(context.Context, *SearchTaskReq) (*SearchTaskResp, error)
	// -----------------------taskFinish-----------------------
	AddTaskFinish(context.Context, *AddTaskFinishReq) (*AddTaskFinishResp, error)
	AddTaskFinishRollback(context.Context, *AddTaskFinishReq) (*AddTaskFinishResp, error)
	UpdateTaskFinish(context.Context, *UpdateTaskFinishReq) (*UpdateTaskFinishResp, error)
	DelTaskFinish(context.Context, *DelTaskFinishReq) (*DelTaskFinishResp, error)
	GetTaskFinishById(context.Context, *GetTaskFinishByIdReq) (*GetTaskFinishByIdResp, error)
	SearchTaskFinish(context.Context, *SearchTaskFinishReq) (*SearchTaskFinishResp, error)
	mustEmbedUnimplementedSigninServer()
}

// UnimplementedSigninServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSigninServer struct{}

func (UnimplementedSigninServer) AddRecode(context.Context, *AddRecodeReq) (*AddRecodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecode not implemented")
}
func (UnimplementedSigninServer) AddRecodeRollback(context.Context, *AddRecodeReq) (*AddRecodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecodeRollback not implemented")
}
func (UnimplementedSigninServer) UpdateRecode(context.Context, *UpdateRecodeReq) (*UpdateRecodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecode not implemented")
}
func (UnimplementedSigninServer) DelRecode(context.Context, *DelRecodeReq) (*DelRecodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRecode not implemented")
}
func (UnimplementedSigninServer) GetRecodeById(context.Context, *GetRecodeByIdReq) (*GetRecodeByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecodeById not implemented")
}
func (UnimplementedSigninServer) SearchRecode(context.Context, *SearchRecodeReq) (*SearchRecodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecode not implemented")
}
func (UnimplementedSigninServer) AddTask(context.Context, *AddTaskReq) (*AddTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedSigninServer) UpdateTask(context.Context, *UpdateTaskReq) (*UpdateTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedSigninServer) DelTask(context.Context, *DelTaskReq) (*DelTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTask not implemented")
}
func (UnimplementedSigninServer) GetTaskById(context.Context, *GetTaskByIdReq) (*GetTaskByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskById not implemented")
}
func (UnimplementedSigninServer) SearchTask(context.Context, *SearchTaskReq) (*SearchTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTask not implemented")
}
func (UnimplementedSigninServer) AddTaskFinish(context.Context, *AddTaskFinishReq) (*AddTaskFinishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskFinish not implemented")
}
func (UnimplementedSigninServer) AddTaskFinishRollback(context.Context, *AddTaskFinishReq) (*AddTaskFinishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskFinishRollback not implemented")
}
func (UnimplementedSigninServer) UpdateTaskFinish(context.Context, *UpdateTaskFinishReq) (*UpdateTaskFinishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskFinish not implemented")
}
func (UnimplementedSigninServer) DelTaskFinish(context.Context, *DelTaskFinishReq) (*DelTaskFinishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTaskFinish not implemented")
}
func (UnimplementedSigninServer) GetTaskFinishById(context.Context, *GetTaskFinishByIdReq) (*GetTaskFinishByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskFinishById not implemented")
}
func (UnimplementedSigninServer) SearchTaskFinish(context.Context, *SearchTaskFinishReq) (*SearchTaskFinishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTaskFinish not implemented")
}
func (UnimplementedSigninServer) mustEmbedUnimplementedSigninServer() {}
func (UnimplementedSigninServer) testEmbeddedByValue()                {}

// UnsafeSigninServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SigninServer will
// result in compilation errors.
type UnsafeSigninServer interface {
	mustEmbedUnimplementedSigninServer()
}

func RegisterSigninServer(s grpc.ServiceRegistrar, srv SigninServer) {
	// If the following call pancis, it indicates UnimplementedSigninServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Signin_ServiceDesc, srv)
}

func _Signin_AddRecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).AddRecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_AddRecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).AddRecode(ctx, req.(*AddRecodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_AddRecodeRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).AddRecodeRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_AddRecodeRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).AddRecodeRollback(ctx, req.(*AddRecodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_UpdateRecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).UpdateRecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_UpdateRecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).UpdateRecode(ctx, req.(*UpdateRecodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_DelRecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRecodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).DelRecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_DelRecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).DelRecode(ctx, req.(*DelRecodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_GetRecodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecodeByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).GetRecodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_GetRecodeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).GetRecodeById(ctx, req.(*GetRecodeByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_SearchRecode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRecodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).SearchRecode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_SearchRecode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).SearchRecode(ctx, req.(*SearchRecodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).AddTask(ctx, req.(*AddTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).UpdateTask(ctx, req.(*UpdateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_DelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).DelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_DelTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).DelTask(ctx, req.(*DelTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_GetTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).GetTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_GetTaskById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).GetTaskById(ctx, req.(*GetTaskByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_SearchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).SearchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_SearchTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).SearchTask(ctx, req.(*SearchTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_AddTaskFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).AddTaskFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_AddTaskFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).AddTaskFinish(ctx, req.(*AddTaskFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_AddTaskFinishRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).AddTaskFinishRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_AddTaskFinishRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).AddTaskFinishRollback(ctx, req.(*AddTaskFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_UpdateTaskFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).UpdateTaskFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_UpdateTaskFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).UpdateTaskFinish(ctx, req.(*UpdateTaskFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_DelTaskFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTaskFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).DelTaskFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_DelTaskFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).DelTaskFinish(ctx, req.(*DelTaskFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_GetTaskFinishById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskFinishByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).GetTaskFinishById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_GetTaskFinishById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).GetTaskFinishById(ctx, req.(*GetTaskFinishByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Signin_SearchTaskFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTaskFinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigninServer).SearchTaskFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Signin_SearchTaskFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigninServer).SearchTaskFinish(ctx, req.(*SearchTaskFinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Signin_ServiceDesc is the grpc.ServiceDesc for Signin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.signin",
	HandlerType: (*SigninServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecode",
			Handler:    _Signin_AddRecode_Handler,
		},
		{
			MethodName: "AddRecodeRollback",
			Handler:    _Signin_AddRecodeRollback_Handler,
		},
		{
			MethodName: "UpdateRecode",
			Handler:    _Signin_UpdateRecode_Handler,
		},
		{
			MethodName: "DelRecode",
			Handler:    _Signin_DelRecode_Handler,
		},
		{
			MethodName: "GetRecodeById",
			Handler:    _Signin_GetRecodeById_Handler,
		},
		{
			MethodName: "SearchRecode",
			Handler:    _Signin_SearchRecode_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _Signin_AddTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Signin_UpdateTask_Handler,
		},
		{
			MethodName: "DelTask",
			Handler:    _Signin_DelTask_Handler,
		},
		{
			MethodName: "GetTaskById",
			Handler:    _Signin_GetTaskById_Handler,
		},
		{
			MethodName: "SearchTask",
			Handler:    _Signin_SearchTask_Handler,
		},
		{
			MethodName: "AddTaskFinish",
			Handler:    _Signin_AddTaskFinish_Handler,
		},
		{
			MethodName: "AddTaskFinishRollback",
			Handler:    _Signin_AddTaskFinishRollback_Handler,
		},
		{
			MethodName: "UpdateTaskFinish",
			Handler:    _Signin_UpdateTaskFinish_Handler,
		},
		{
			MethodName: "DelTaskFinish",
			Handler:    _Signin_DelTaskFinish_Handler,
		},
		{
			MethodName: "GetTaskFinishById",
			Handler:    _Signin_GetTaskFinishById_Handler,
		},
		{
			MethodName: "SearchTaskFinish",
			Handler:    _Signin_SearchTaskFinish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "signin.proto",
}
